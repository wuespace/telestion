{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Telestion Developer Documentation","text":"<p>Telestion is a framework for building telemetry applications. You can find more information about the project on the project website.</p> <p>This documentation is about developing a Ground Station software using Telestion. For end-user documentation, please ask your Telestion developer.</p> <p>Get started</p>"},{"location":"#quick-links","title":"Quick links","text":""},{"location":"#github-repositories","title":"GitHub repositories","text":"<ul> <li> Telestion \u2013 The main repository for the Telestion project</li> <li> Telestion Architecture \u2013 The repository that hosts the ADRs (Architecture Decision Records) for the Telestion project</li> </ul>"},{"location":"#related-projects","title":"Related projects","text":"<ul> <li>NATS \u2013 The message bus used by Telestion</li> <li>TypeScript \u2013 The programming language used for most components by Telestion</li> <li>Deno \u2013 The runtime used by Telestion for TypeScript and JavaScript based services</li> <li>React \u2013 The frontend framework used by Telestion</li> </ul>"},{"location":"#discord","title":"Discord","text":"<p>The Telestion Discord server is the best place to interact with the Telestion community. You can ask questions, get help, and discuss the project with other users and developers.</p> <p> Join the Discord server</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>(coming soon)</p>"},{"location":"message-bus/","title":"Message Bus","text":"<p>The message bus is a simple, lightweight, and fast way to send messages between different parts (services) of your application. It\u2019s a publish/subscribe system that allows you to send messages to a specific subject and have any listeners on that subject receive the message.</p>"},{"location":"message-bus/#messages","title":"Messages","text":"<p>Messages are the way that data is sent between services. In the Telestion ecosystem. Messages are either JSON or binary data.</p>"},{"location":"message-bus/#subjects","title":"Subjects","text":"<p>Subjects are the way that messages are sent between services. Each subject has a name. The name is used to identify the subject.</p>"},{"location":"message-bus/#publish-subscribe","title":"Publish / Subscribe","text":"<p>The message bus is a publish/subscribe system. This means that you can publish messages to a specific subject and have any listeners on that subject receive the message.</p> <p>Warning</p> <p>Messages aren\u2019t stored when using the publish/subscribe method. This means that if a service isn\u2019t listening on a subject when a message gets published, it won\u2019t receive the message.</p> <p>If you need to ensure that a message is received, you can use the Request / Reply system to await confirmation.</p>"},{"location":"message-bus/#example","title":"Example","text":"<p>Here is an example of how the publish/subscribe system works:</p> <pre><code>sequenceDiagram\n    accTitle: Sequence diagram of the publish/subscribe system. Text description in collapsed section below.\n    participant Service A\n    participant Message Bus\n    participant Service B\n    Service A-&gt;&gt;Message Bus: Subscribe to subject \"test\"\n    Service B-&gt;&gt;Message Bus: Publish message \"Hello World\" to subject \"test\"\n    Message Bus-&gt;&gt;Service A: Message \"Hello World\" on subject \"test\"</code></pre> Text Description <ol> <li>Service A subscribes to the subject \u201ctest\u201d on the message bus</li> <li>Service B publishes the message \u201cHello World\u201d to the subject \u201ctest\u201d</li> <li>The message bus sends the message \u201cHello World\u201d to Service A</li> </ol>"},{"location":"message-bus/#request-reply","title":"Request / Reply","text":"<p>The message bus is also a request/reply system. This means that you can send a request to a specific subject and have any listeners on that subject reply to the request.</p>"},{"location":"message-bus/#example_1","title":"Example","text":"<p>Here is an example of how the request/reply system works:</p> <pre><code>sequenceDiagram\n    accTitle: Sequence diagram of the request/reply system. Text description in collapsed section below.\n    participant Service A\n    participant Message Bus\n    participant Service B\n    Service B-&gt;&gt;Message Bus: Subscribe to subject \"test\"\n    Service A-&gt;&gt;Message Bus: Send request \"Hello World\" to subject \"test\"\n    Message Bus-&gt;&gt;Service B: Request \"Hello World\" on subject \"test\"\n    Service B-&gt;&gt;Message Bus: Reply \"Hello World\" to subject \"test\"\n    Message Bus-&gt;&gt;Service A: Reply \"Hello World\" on subject \"test\"</code></pre> Text Description <ol> <li>Service B subscribes to the subject \u201ctest\u201d on the message bus</li> <li>Service A sends the request \u201cHello World\u201d to the subject \u201ctest\u201d</li> <li>The message bus sends the request \u201cHello World\u201d to Service B</li> <li>Service B replies to the request with \u201cHello World\u201d</li> <li>The message bus sends the reply \u201cHello World\u201d to Service A</li> </ol>"},{"location":"message-bus/#nats","title":"NATS","text":"<p>We use NATS as our message bus. While all other services can be replaced, the message bus is a core component of Telestion. It is the backbone of the entire system.</p>"},{"location":"message-bus/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>NATS also handles everything related to authentication and authorization for the message bus. You can easily control who can send and receive messages on which subjects.</p>"},{"location":"project-folder-structure/","title":"Project folder structure","text":"<p>Every Telestion project is different, and so is its folder structure. Some projects might not even have a frontend and write every backend service in Java, while others might have a frontend and use Deno for their backend services.</p> <p>That\u2019s not very helpful, is it? So, let\u2019s take a look at a folder structure that is suitable for most projects. Note that as your project grows, you might want to change the structure to better suit your needs. But you will know when the time has come.</p>"},{"location":"project-folder-structure/#version-control","title":"Version control","text":"<p>The first thing you should do is to create a new Git repository. This repository will contain all the code for your project. You can use GitHub, GitLab, or any other Git hosting service you like.</p>"},{"location":"project-folder-structure/#recommended-folder-structure","title":"Recommended folder structure","text":"<p>The following folder structure is recommended for most projects:</p> <ul> <li> <code>backend-deno</code> - A folder that contains all backend services written in Deno.<ul> <li> <code>[service-name]</code> - A folder that contains a backend service written in Deno.<ul> <li> <code>mod.ts</code> - The entry point of the backend service.</li> <li> <code>README.md</code> - A file that contains information about the backend service.</li> </ul> </li> <li> <code>Dockerfile</code> - A Dockerfile for the Deno-based backend services, if you want to use Docker.</li> </ul> </li> <li> <code>frontend-react</code> - A folder that contains the frontend written in React.<ul> <li> <code>package.json</code> - The frontend application\u2019s <code>package.json</code> file.</li> <li>\u2026</li> </ul> </li> <li> <code>frontend-cli</code> - A folder that contains the CLI frontend written in Deno.<ul> <li> <code>mod.ts</code> - The entry point of the CLI.</li> <li> <code>README.md</code> - A file that contains information about the CLI.</li> </ul> </li> <li> <code>nats</code> - A folder that contains the NATS server configuration.<ul> <li> <code>nats-server.conf</code> - The configuration file for the NATS server.</li> </ul> </li> <li> <code>docker-compose.yml</code> - A Docker Compose file that contains the configuration for the Docker containers.</li> <li> <code>README.md</code> - A file that contains information about the project.</li> </ul>"},{"location":"project-folder-structure/#alternatives","title":"Alternatives","text":"<p>There are also other options how you could structure your project. For example, if you have completely distinct groups of services that are not related to each other, you could create a folder for each group, and differentiate between programming languages used under these groups.</p> <p>However, to get started, the above structure should be sufficient. You can always change it later.</p>"},{"location":"service/","title":"Services","text":"<p>Services are small, self-contained, and (ideally) stateless applications that can be deployed and scaled independently. They\u2019re designed to be used in conjunction with other services and are often packaged together to form a larger application.</p> <p>In less abstract terms, a service is a single application that is part of the bigger Telestion application. It is a single application that is responsible for a single task. For example, the project template contains the following services by default:</p> <ul> <li>Frontend: A web application that is responsible for displaying the user interface</li> <li>Database Service: A service that is responsible for storing data</li> <li>Database Query Service: A service that is responsible for querying the database</li> <li>Data Splitter Service: A service that is responsible for creating mock data to test the application</li> </ul>"},{"location":"service/#service-types","title":"Service Types","text":"<p>There are two types of services:</p> <ul> <li>Frontend Services: Services that are responsible for displaying the user interface</li> <li>Backend Services: Services that are responsible for processing data</li> </ul> <p>Info</p> <p>Concretely, the main difference between frontend and backend is that frontend services act on behalf of the user, while backend services act on behalf of the system.</p>"},{"location":"service/#service-architecture","title":"Service Architecture","text":"<p>While similar to the common microservice architecture, Telestion is less strict about its services. For example, Telestion services are not required to be stateless. While state in services makes it harder to scale them, it also makes it easier to develop them.</p> <p>Telestion services are also not required to be deployed independently. They can be deployed together as a single application.</p>"},{"location":"service/#service-communication","title":"Service Communication","text":"<p>Telestion services communicate via the NATS message bus. This means that they can send messages to each other and receive messages from each other. This allows them to communicate with each other without having to know each other\u2019s IP addresses or ports.</p>"},{"location":"Backend%20Development/","title":"Developing Backend Services","text":"<p>Backend services are small, self-contained, and (ideally) stateless applications that can be deployed and scaled independently. They are designed to be used in conjunction with other services and are often packaged together to form a larger application.</p>","tags":["Backend"]},{"location":"Backend%20Development/#example-structure","title":"Example Structure","text":"<p>The following is an example for the combination of services creating the backend of a Telestion application:</p> <pre><code>graph TB\n    accTitle: Diagram showcasing the structure of an exemplary Telestion backend. Text description in collapsible section below.\n    db[Database]\n    md[Mission Device]\n    subgraph Backend\n        io[IO Service]\n        tmps[Telemetry Parser Service]\n        tcs[Telecommand Service]\n        dbs[Database Writer Service]\n        dbqs[Database Query Service]\n    end\n    subgraph Frontend\n        wc[Web Client]\n    end\n    md &lt;---&gt; io\n    io --&gt; tmps\n    tmps --&gt; dbs\n    dbs --&gt; db\n    wc --&gt; dbqs\n    dbqs --&gt; db\n    wc --&gt; tcs\n    tcs --&gt; io</code></pre> Text Description <ol> <li>The Mission Device sends telemetry data to the IO Service.</li> <li>The IO Service (backend) forwards the telemetry data to the Telemetry Parser Service.</li> <li>The Telemetry Parser Service (backend) parses the telemetry data and writes it to the database via the Database Writer Service.</li> <li>The Database Writer Service (backend) writes the telemetry data to the database.</li> <li>The Web Client (frontend) queries the database via the Database Query Service.</li> <li>The Database Query Service (backend) queries the database and returns the data to the Web Client.</li> <li>The Web Client (frontend) sends telecommands to the Telecommand Service. </li> <li>The Telecommand Service forwards the telecommands to the IO Service.</li> <li>The IO Service sends the telecommands to the Mission Device.</li> </ol>","tags":["Backend"]},{"location":"Backend%20Development/#getting-started","title":"Getting Started","text":"<p>The most common way to write a backend service is to use TypeScript.</p> <p>Get started writing a backend service in TypeScript </p> <p>However, for some use cases, it may be necessary to write a backend service in other languages.</p> <p>You can even write a backend service in any language you want. The only requirement is that it can communicate with the NATS message bus. To learn how to write a service in other languages, see Using other languages.</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/","title":"Using other languages","text":"<p>You can use any language you want to write your backend. The only requirement is that it can communicate with the NATS message bus.</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#implementation-requirements","title":"Implementation Requirements","text":"<p>The only technical requirement for a backend service is that it can communicate with the NATS message bus. This means that it must be able to send and receive messages on the message bus.</p> <p>However, there are some additional standards that you should follow to make your service easier to use (and compliant with the Telestion ecosystem):</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#deployment","title":"Deployment","text":"<p>Your service should be deployable as both a Docker container and as an executable. This makes it easier to deploy and scale your service.</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#configuration","title":"Configuration","text":"<p>Your service should be configurable via environment variables.</p> <p>Every Telestion service receives at least the following environment variables:</p> <ul> <li><code>NATS_URL</code>: The URL of the NATS server</li> <li><code>NATS_USER</code>: The username of the NATS user</li> <li><code>NATS_PASSWORD</code>: The password of the NATS user</li> <li><code>SERVICE_NAME</code>: The name of the service. This is used to create a unique queue group for your service. See Queues for more information.</li> <li><code>DATA_DIR</code>: The path to the data directory. This is where your service should store any data it needs to persist. This is shared between multiple services. To ensure that your service doesn\u2019t overwrite data from other services, you should create a subdirectory for your service.</li> </ul> <p>If your service doesn\u2019t receive any of these environment variables, it should exit with a non-zero exit code.</p> <p>Warning</p> <p>There can be multiple instances of a service with the same name running at the same time. They are guaranteed to have the same configuration. If you need a truly unique identifier, you can combine the <code>SERVICE_NAME</code> and the process ID.</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#logging","title":"Logging","text":"<p>Your service should log any \u201cfeedback\u201d to <code>stdout</code> and <code>stderr</code>.</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#queues","title":"Queues","text":"<p>NATS allows you to create queue groups. This means that you can have multiple instances of the same service running, and they\u2019ll share the messages they receive.</p> <p>If you want to use this feature, you should use the <code>SERVICE_NAME</code> environment variable to create a unique queue group for your service.</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#message-body","title":"Message Body","text":"<p>Your message must be able to handle, without crashing, the following types of messages:</p> <ul> <li>JSON-encoded UTF-8 strings</li> <li>Binary data</li> </ul> <p>Your service mustn\u2019t assume anything about the format or content of the message body. It must be able to handle any message body of the two types.</p>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#health-checks","title":"Health Checks","text":"<p>Your service should provide a health check feature on the message bus subject <code>__telestion__/health</code>. This allows other services to check if your service is still running.</p> <p>While running, any Telestion service should respond (within 0.5 seconds) to requests on the <code>__telestion__/health</code> subject with a message containing the following JSON-encoded information:</p> <pre><code>{\n    \"errors\": 0, // or number of \"recent\" errors\n    \"name\": \"My Service\" // the SERVICE_NAME\n}\n</code></pre>","tags":["Backend"]},{"location":"Backend%20Development/other-languages/#service-behavior-specification","title":"Service Behavior Specification","text":"<p>A formal description of the behavior of a Telestion service is provided in the Service Behavior Specification. It can be used to test libraries for writing Telestion services in other languages.</p>","tags":["Backend"]},{"location":"Backend%20Development/rust/","title":"Writing a Backend Service in Rust","text":"","tags":["Backend","Rust"]},{"location":"Backend%20Development/rust/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust</li> <li>Cargo</li> <li>NATS server</li> <li>NATS client</li> <li>Tokio</li> </ul>","tags":["Backend","Rust"]},{"location":"Backend%20Development/rust/#connecting-to-the-message-bus","title":"Connecting to the Message Bus","text":"<pre><code>use nats::asynk::Connection;\nuse std::error::Error;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n    let nc = Connection::new(\"nats://localhost:4222\").await?;\n    let sub = nc.subscribe(\"bar\")?.with_handler(move |msg| {\n        println!(\"Received {}\", &amp;msg);\n        Ok(())\n    });\n\n    Ok(())\n}\n</code></pre>","tags":["Backend","Rust"]},{"location":"Backend%20Development/rust/#getting-configuration-from-the-environment","title":"Getting configuration from the environment","text":"<pre><code>[dependencies]\ndotenv = \"0.15.0\"\n</code></pre> <pre><code>use dotenv::dotenv;\nuse std::env;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n    dotenv().ok();\n\n    let nats_url = env::var(\"NATS_URL\")?;\n    let nc = Connection::new(nats_url).await?;\n\n    Ok(())\n}\n</code></pre>","tags":["Backend","Rust"]},{"location":"Backend%20Development/service-behavior/","title":"Service Behavior Specification","text":"<p>Telestion services can be written in any language that supports the NATS protocol.</p> <p>While there can be differences in the implementation, there are some things that all Telestion services should have in common. This includes, among other things, the configuration of services, allowing seamless deployment of services written in different languages.</p>"},{"location":"Backend%20Development/service-behavior/#gherkin","title":"Gherkin","text":"<p>To specify these common behaviors, we use Gherkin. Gherkin is a language that is used to specify the behavior of software in a human-readable way while still being executable, meaning that tests can be automated.</p> <p>They are based on examples and should be written in a way that is independent of the implementation language.</p> <p>The Gherkin files are located in the <code>backend-features</code> directory of the Telestion project.</p>"},{"location":"Backend%20Development/service-behavior/#documentation","title":"Documentation","text":"<p>The Gherkin files get converted to Markdown files that are then included in the documentation.</p>"},{"location":"Backend%20Development/service-behavior/auth/","title":"NATS authentication","text":""},{"location":"Backend%20Development/service-behavior/auth/#starting-the-service-with-valid-credentials","title":"Starting the service with valid credentials","text":"<p>Given I have the basic service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>And the NATS server requires authentication</p> <p>And \u201cnats\u201d is a NATS user with password \u201cpassword\u201d</p> <p>And I have an environment variable named \u201cNATS_URL\u201d with value \u201clocalhost:4222\u201d</p> <p>And I have an environment variable named \u201cNATS_USER\u201d with value \u201cnats\u201d</p> <p>And I have an environment variable named \u201cNATS_PASSWORD\u201d with value \u201cpassword\u201d</p> <p>When I start the service</p> <p>Then the service should start</p> <p>And the service should connect to NATS.</p>"},{"location":"Backend%20Development/service-behavior/auth/#starting-the-service-with-invalid-credentials-fails","title":"Starting the service with invalid credentials fails","text":"<p>Given I have the basic service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>And the NATS server requires authentication</p> <p>And \u201cnats\u201d is a NATS user with password \u201cpassword\u201d</p> <p>And I have an environment variable named \u201cNATS_URL\u201d with value \u201clocalhost:4222\u201d</p> <p>And I have an environment variable named \u201cNATS_USER\u201d with value \u201cnats\u201d</p> <p>And I have an environment variable named \u201cNATS_PASSWORD\u201d with value \u201cwrong\u201d</p> <p>Then the service should fail to start.</p>"},{"location":"Backend%20Development/service-behavior/auth/#starting-the-service-without-credentials-fails-when-the-authentication-is-required","title":"Starting the service without credentials fails when the authentication is required","text":"<p>Given I have the basic service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>And the NATS server requires authentication</p> <p>And \u201cnats\u201d is a NATS user with password \u201cpassword\u201d</p> <p>And I have an environment variable named \u201cNATS_URL\u201d with value \u201clocalhost:4222\u201d</p> <p>Then the service should fail to start.</p>"},{"location":"Backend%20Development/service-behavior/auth/#starting-the-service-fails-when-the-nats-server-is-offline","title":"Starting the service fails when the NATS server is offline","text":"<p>Given I have the basic service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>And the NATS server requires authentication</p> <p>And \u201cnats\u201d is a NATS user with password \u201cpassword\u201d</p> <p>And I have an environment variable named \u201cNATS_URL\u201d with value \u201clocalhost:4222\u201d</p> <p>And I have an environment variable named \u201cNATS_USER\u201d with value \u201cnats\u201d</p> <p>And I have an environment variable named \u201cNATS_PASSWORD\u201d with value \u201cpassword\u201d</p> <p>And the NATS server is offline</p> <p>Then the service should fail to start.</p>"},{"location":"Backend%20Development/service-behavior/config/","title":"Service Configuration","text":""},{"location":"Backend%20Development/service-behavior/config/#services-can-be-configured-through-environment-variables","title":"Services can be configured through environment variables","text":"<p>The most common way to configure services is through environment variables.   Environment variables are easy to use and can be set in a variety of ways.   They are also easy to overwrite when running services locally.</p> <p>Given I have the basic service configuration</p> <p>And I have an environment variable named \u201cTEST\u201d with value \u201c1\u201d</p> <p>When I start the service without NATS</p> <p>Then the service should be configured with \u201cTEST\u201d set to \u201c1\u201d.</p>"},{"location":"Backend%20Development/service-behavior/config/#services-can-be-configured-through-cli-arguments","title":"Services can be configured through CLI arguments","text":"<p>Sometimes it is useful to configure services through CLI arguments.   CLI arguments are easy to use and can be set when running services locally.</p> <p>Given I have the basic service configuration</p> <p>When I start the service with \u201c\u2013TEST=1\u201d without NATS</p> <p>Then the service should be configured with \u201cTEST\u201d set to \u201c1\u201d.</p>"},{"location":"Backend%20Development/service-behavior/config/#trying-to-run-services-without-providing-the-required-configuration-fails","title":"Trying to run services without providing the required configuration fails","text":"<p>There are some configuration values that are required for services to run.   If these values are not provided, the service should fail to start.   - <code>NATS_URL</code> - to connect to NATS   - <code>SERVICE_NAME</code> - to group services in NATS when subscribing with multiple instances   - <code>DATA_DIR</code> - a directory where the service is free to store persistent data</p> <p>During development, it is possible to use the development mode so you don\u2019t have to provide these values. However, this is not recommended for production.</p> <p>Given I have no service configuration</p> <p>Then the service should fail to start.</p>"},{"location":"Backend%20Development/service-behavior/config/#cli-arguments-overwrite-environment-variables","title":"CLI arguments overwrite environment variables","text":"<p>To make it easy to overwrite configuration values when running services locally, CLI arguments should overwrite environment variables.</p> <p>Given I have the basic service configuration</p> <p>And I have an environment variable named \u201cTEST\u201d with value \u201c1\u201d</p> <p>When I start the service with \u201c\u2013TEST=2\u201d without NATS</p> <p>Then the service should be configured with \u201cTEST\u201d set to \u201c2\u201d.</p>"},{"location":"Backend%20Development/service-behavior/dev-mode/","title":"Development mode","text":""},{"location":"Backend%20Development/service-behavior/dev-mode/#the-service-can-be-started-in-dev-mode-to-use-default-parameters-during-development","title":"The service can be started in dev mode to use default parameters during development","text":"<p>During development, it is useful to start the service with default parameters, so that it can be used without any configuration.</p> <p>Given I have no service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>When I start the service with \u201c\u2013dev\u201d without NATS</p> <p>Then the service should start</p> <p>And the service should be configured with \u201cNATS_USER\u201d set to \u201cundefined\u201d</p> <p>And the service should be configured with \u201cNATS_PASSWORD\u201d set to \u201cundefined\u201d.</p>"},{"location":"Backend%20Development/service-behavior/dev-mode/#any-custom-configuration-overwrites-dev-mode-parameters","title":"Any custom configuration overwrites dev mode parameters","text":"<p>Given I have no service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4255\u201d</p> <p>And I have an environment variable named \u201cNATS_URL\u201d with value \u201clocalhost:4255\u201d</p> <p>When I start the service with \u201c\u2013dev \u2013DATA_DIR=/tmp\u201d</p> <p>Then the service should start</p> <p>And the service should connect to NATS</p> <p>And the service should be configured with \u201cDATA_DIR\u201d set to \u201c/tmp\u201d</p> <p>And the service should be configured with \u201cNATS_URL\u201d set to \u201clocalhost:4255\u201d.</p>"},{"location":"Backend%20Development/service-behavior/nats/","title":"NATS Integration in Services","text":""},{"location":"Backend%20Development/service-behavior/nats/#the-service-has-access-to-the-nats-client-after-startup","title":"The service has access to the NATS client after startup","text":"<p>The service should be able to access the NATS client after startup. This enables service developers to use the NATS client to publish and subscribe to messages.</p> <p>Given I have the basic service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>When I start the service</p> <p>Then the service should connect to NATS</p> <p>And the NATS connection API should be available to the service.</p>"},{"location":"Backend%20Development/service-behavior/nats/#the-developer-disables-the-nats-integration","title":"The developer disables the NATS integration","text":"<p>The developer may want to disable the NATS integration for testing purposes or because the service does not need NATS.</p> <p>Given I have the basic service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>When I start the service without NATS</p> <p>Then the service should not connect to NATS.</p>"},{"location":"Backend%20Development/service-behavior/service/","title":"Service Lifecycle","text":""},{"location":"Backend%20Development/service-behavior/service/#starting-a-service","title":"Starting a service","text":"<p>The most trivial scenario of them all. We start the service and it should start. That\u2019s it. No more, no less. But it\u2019s a good start.</p> <p>Given I have the basic service configuration</p> <p>And I have a NATS server running on \u201clocalhost:4222\u201d</p> <p>When I start the service</p> <p>Then the service should start.</p>"},{"location":"Backend%20Development/typescript/","title":"Writing a Backend Service in TypeScript","text":"<p>TypeScript is the recommended language for writing backend services. It is a superset of JavaScript that adds static typing and other features that make it easier to write and maintain code.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#prerequisites","title":"Prerequisites","text":"<p>To write a backend service in TypeScript, you should be familiar with JavaScript and (ideally) TypeScript. Overall, basic JavaScript knowledge will be sufficient to get started, but <code>async</code>/<code>await</code> and Promises are used extensively for services, so you should be familiar with these topics.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#deno","title":"Deno","text":"<p>Deno is a JavaScript/TypeScript runtime that is built on top of V8, Rust, and Tokio. It is a secure runtime for JavaScript and TypeScript.</p> <p>Compared to Node.js, Deno has the following advantages:</p> <ul> <li>It has built-in TypeScript support</li> <li>It has built-in security features</li> <li>It\u2019s easier to deploy</li> </ul>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#installing-deno","title":"Installing Deno","text":"<p>To install Deno, please follow the instructions on the Deno website .</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#writing-a-basic-service","title":"Writing a basic Service","text":"","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#creating-a-new-service","title":"Creating a new Service","text":"<p>Create a new directory for your service:</p> <pre><code>mkdir my-service\ncd my-service\n</code></pre> <p>Create a new file called <code>service.ts</code>:</p> <pre><code>touch service.ts\n</code></pre>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#writing-the-service","title":"Writing the Service","text":"<p>Open <code>service.ts</code> in your favorite editor and add the following code:</p> service.ts<pre><code>import { startService } from 'https://deno.land/x/telestion/mod.ts';// (1)!\n\nawait startService/*(2)!*/({\n    nats: false,// (3)!\n});\n\nconsole.log('Hello World!');// (4)!\n</code></pre> <ol> <li>Import the <code>startService</code> function from the library.</li> <li>Start the service. This automatically connects to NATS and does some other setup.</li> <li>Disable NATS. We don\u2019t need it for this example and it would otherwise throw an error because we haven\u2019t configured it yet.</li> <li>Log a message to the console when the service starts.</li> </ol>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#running-the-service","title":"Running the Service","text":"<p>To run the service, run the following command:</p> <pre><code>deno run --allow-all service.ts --dev\n</code></pre> <p>Success</p> <p>You should see the following output:</p> <pre><code>Running in development mode. Using default values for missing environment variables.\nHello World!\n</code></pre> <p>Running in development mode</p> <p>When you run the service with the <code>--dev</code> flag, the service will use default values for missing environment variables. You\u2019ll learn more about this in the configuration section.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/#next-steps","title":"Next Steps","text":"<p>Now that you have a basic service running, you should have a look at how to make your service configurable.</p> <p>Read more about configuration</p> <p>If you prefer to learn by example, you can also have a look at the samples.</p> <p>Browse samples on GitHub</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/","title":"Service Configuration","text":"<p>Tip</p> <p>Not every service needs to be configurable. If you are writing a simple service, you can skip this section.</p> <p>However, you can often save yourself a lot of time by making your service configurable. This way, you can use the same service in multiple environments without having to change the code.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/#configuration-sources","title":"Configuration Sources","text":"<p>Services can be configured using the following sources:</p> <ul> <li>Environment variables</li> <li>Command line arguments</li> <li>An optional configuration file (JSON)</li> </ul> <p>All these sources get combined into a single configuration object. If a configuration value is defined in multiple sources, the following order is used:</p> <ol> <li>Command line arguments</li> <li>Environment variables</li> <li>Configuration file</li> </ol>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are the most common way to configure a service. They are easy to use and supported by most platforms.</p> <p>Environment variables are always strings. If you need to use a different type, you will have to parse the value yourself.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/#command-line-arguments","title":"Command Line Arguments","text":"<p>Command line arguments are useful for configuring a service during development. They are also useful for overriding configuration values when running a service in production.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/#configuration-file","title":"Configuration File","text":"<p>Configuration files are useful for configuring a service in production. They are also useful for overriding configuration values when running a service in production.</p> <p>Configuration files are optional. If no configuration file is provided, the service will still start.</p> <p>A configuration file is a JSON file with an object as its root element. The keys of this object are the configuration values. The values of this object are the configuration values.</p> <p>The configuration file is loaded from the path passed as <code>CONFIG_FILE</code> as either environment variable or command line argument.</p> <p>You can optionally also pass a <code>CONFIG_KEY</code> to load a specific key from the configuration file. This is useful if you want to use the same configuration file for multiple services.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/#configuration-precedence-overview-diagram","title":"Configuration Precedence Overview Diagram","text":"<pre><code>graph TB\n    accTitle: Diagram of the configuration sources and their order of precedence. Text description in collapsed section below.\n    A[Environment Variables] --merged into--&gt; C[Preliminary Configuration]\n    B[Command line arguments] --merged into with priority--&gt; C\n    C -.CONFIG_FILE.-&gt; D[Configuration File]\n    D --merged into--&gt; E[Configuration Object]\n    C --merged into with priority--&gt; E</code></pre> <p>Configuration sources and their order of precedence.</p> Text Description <ol> <li>Environment variables are merged into the preliminary configuration.</li> <li>Command line arguments are merged into the preliminary configuration with priority.</li> <li>The configuration file is loaded (based on the <code>CONFIG_FILE</code> parameter of the preliminary configuration) and merged into the preliminary configuration.</li> <li>The preliminary configuration is merged into the configuration object with priority.</li> <li>The configuration object gets returned.</li> </ol>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/#minimal-configuration-values","title":"Minimal Configuration Values","text":"<p>Some configuration values are required for all services. These values are:</p> <ul> <li><code>NATS_URL</code>: The URL of the NATS server to connect to.</li> <li><code>NATS_USER</code> (if the NATS server requires authentication): The username to use when connecting to NATS.</li> <li><code>NATS_PASSWORD</code> (if the NATS user requires authentication): The password to use when connecting to NATS.</li> <li><code>SERVICE_NAME</code>: The name of the service. This is used to identify the service in the logs and in the NATS server. This is required for all services.</li> <li><code>DATA_DIR</code>: The directory where the service can store data. This is required for all services.</li> </ul> <p>Tip</p> <p>To make it easier to run your service during development, sensible defaults are used when you pass the <code>--dev</code> flag to the service:</p> Configuration Value Default Value <code>NATS_URL</code> <code>localhost:4222</code> <code>NATS_USER</code> (none) <code>NATS_PASSWORD</code> (none) <code>SERVICE_NAME</code> <code>dev-[process gid]</code> <code>DATA_DIR</code> <code>./data</code> <p>This way, you don\u2019t have to set all the required configuration values when running the service locally.</p> <p>Without the <code>--dev</code> flag, the service fails if any of the required configuration values are missing.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/configuration/#accessing-the-configuration","title":"Accessing the Configuration","text":"<p>Now that you know about the different configuration sources, let\u2019s see how you can access the configuration in your service. Since the complicated bits are handled by the <code>startService</code> function, this is actually pretty straight forward.</p> <p>Create a file called <code>config.json</code> next to your <code>service.ts</code> file with the following content:</p> config.json<pre><code>{\n  \"SERVICE_NAME\": \"Config Tester\",\n  \"tasks\": {\n    \"task1\": \"Task 1\",\n    \"task2\": \"Task 2\"\n  }\n}\n</code></pre> <p>Now, let\u2019s adjust the <code>service.ts</code> file to use the configuration:</p> service.ts<pre><code>import { startService } from \"https://deno.land/x/telestion/mod.ts\";\nimport { z } from \"https://deno.land/x/zod@v3.21.4/mod.ts\";// (1)!\n\nconst { config: rawConfig/* (2)! */} = await startService({\n  nats: false,\n});\n\nconst config = z.object({\n  NAME: z.string(),\n  tasks: z.record(z.string(), z.string()),\n}).parse(rawConfig);// (3)!\n\nconsole.log(config.NAME, config.tasks);// (4)!\n</code></pre> <ol> <li>Import the <code>z</code> function from the Zod to validate the configuration. Never assume the configuration is valid. Always validate it before using it.</li> <li>Save the raw configuration in a variable called <code>rawConfig</code>.</li> <li>Validate the configuration using Zod. This will throw an error if the configuration is invalid.</li> <li>You can now safely use the configuration in your service. If the configuration is invalid, the service will not start.</li> </ol> <p>Now, let\u2019s see what happens if we run the service:</p> <pre><code>deno run --allow-all service.ts --dev\n</code></pre> <p>As expected, the service doesn\u2019t start:</p> <pre><code>$ deno run --allow-all service.ts --dev\nRunning in development mode.\nUsing default values for missing environment variables.\nerror: Uncaught ZodError: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"NAME\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tasks\"\n    ],\n    \"message\": \"Required\"\n  }\n]\n</code></pre> <p>Let\u2019s fix this by passing the required configuration values:</p> <pre><code>deno run --allow-all service.ts --dev \\\n  --CONFIG_FILE ./config.json \\ # (1)!\n  --NAME \"Hello\" # (2)!\n</code></pre> <ol> <li>Pass the path to the configuration file using the <code>--CONFIG_FILE</code> flag.</li> <li>Pass the <code>NAME</code> configuration value using the <code>--NAME</code> flag.</li> </ol> <p>Now, everything works as expected.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/e2e-log-service/","title":"End to end example: Log Service","text":"<p>Note</p> <p>The author generated this text in part with GPT-3, OpenAI\u2019s large-scale language-generation model. Upon generating draft language, the author reviewed, edited, and revised the language to their own liking and takes ultimate responsibility for the content of this publication.</p> <p>This tutorial will explain step-by-step how to write a log service that will listen for messages on the <code>log.&gt;</code> subject and write them to a file.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/e2e-log-service/#steps","title":"Steps","text":"<ol> <li> <p>First, we need to import the <code>startService</code> function from our library (<code>lib.ts</code>) and the <code>encode</code> function from the standard Deno library.</p> <pre><code>import { startService } from \"https://deno.land/x/telestion/mod.ts\";\nimport { encode } from \"https://deno.land/std@0.186.0/encoding/hex.ts\";\n</code></pre> </li> <li> <p>Next, we create a new TextEncoder instance. This will be used to turn messages into a format that can be written to a file.</p> <pre><code>const encoder = new TextEncoder();\n</code></pre> </li> <li> <p>We then call the <code>startService</code> function to set up our service. This will return an object containing information about the message bus that we can use to subscribe to messages.</p> <pre><code>const { messageBus } = await startService();\n</code></pre> </li> <li> <p>We then subscribe to the message bus, using a wildcard subscription for any messages published on the <code>log.&gt;</code> subject. This will allow us to receive all messages published on any topics starting with <code>log.</code>.</p> <pre><code>const logMessages = messageBus.subscribe(\"log.&gt;\");\n</code></pre> </li> <li> <p>We use a for-await-of loop to receive messages from the message bus. For each message, we extract the subject (split the string on <code>.</code>, then take the second element) and the message data, which we encode using the <code>encode</code> function from the standard library.</p> <pre><code>for await (const msg of logMessages) {\n  try {\n    const currentTime = new Date().toISOString();\n    const logMessage = encode(msg.data).toString();\n    const subject = msg.subject.split(\".\")[1];\n</code></pre> </li> <li> <p>We log the message to the console and write it to a file (appending it to the end).</p> <pre><code>    console.log(`${currentTime} [${subject}] ${logMessage}`);\n    await Deno.writeFile(\n      \"log.txt\",\n      encoder.encode(`${currentTime} [${subject}] ${logMessage}\\n`),\n      { append: true },\n    );\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre> </li> </ol> <p>And that\u2019s it! Our service is now complete and ready to be used.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/e2e-log-service/#final-code","title":"Final Code","text":"<pre><code>import { startService } from \"https://deno.land/x/telestion/mod.ts\";\nimport { encode } from \"https://deno.land/std@0.186.0/encoding/hex.ts\";\n\nconst encoder = new TextEncoder();\n\nconst { messageBus } = await startService();\n\nconst logMessages = messageBus.subscribe(\"log.&gt;\");\n\nfor await (const msg of logMessages) {\n  try {\n    const currentTime = new Date().toISOString();\n    const logMessage = encode(msg.data).toString();\n    const subject = msg.subject.split(\".\")[1];\n\n    console.log(`${currentTime} [${subject}] ${logMessage}`);\n    await Deno.writeFile(\n      \"log.txt\",\n      encoder.encode(`${currentTime} [${subject}] ${logMessage}\\n`),\n      { append: true },\n    );\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/","title":"Interacting with the Message Bus","text":"<p>The message bus is a simple, lightweight, and fast way to send messages between different parts (services) of your application. It is a simple publish/subscribe system that allows you to send messages to a specific subject and have any listeners on that subject receive the message.</p> <p>Running NATS for development</p> <p>Now that we want to interact with the message bus, we need to have NATS running. If you\u2019re using the <code>--dev</code> mode for testing your service, it\u2019s sufficient to run the <code>nats-server</code> executable in a separate terminal window. This will start a local NATS server on port <code>4222</code> which is the default port for NATS.</p> <p>If you have a prdouction-like setup, you\u2019ll need to pass the <code>NATS_USER</code> and <code>NATS_PASSWORD</code> corresponding to your NATS configuration as configuration parameters to your service for authentication.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#connecting-to-the-message-bus","title":"Connecting to the Message Bus","text":"<p>Connecting to the event bus is automatically handled by the <code>startService</code> function. It will connect to the message bus using the <code>NATS_URL</code> environment variable. If you\u2019re running the service in <code>--dev</code> mode, this will be <code>nats://localhost:4222</code> by default.</p> <p>All you need to do compared to the previous examples is to omit the <code>{ nats: false }</code> parameter from the <code>startService</code> function call:</p> service.ts<pre><code>import {\n    startService\n} from \"https://deno.land/x/telestion/mod.ts\";\n\nconst {nc/* (1)! */} = await startService(/* (2)! */);\n</code></pre> <ol> <li>Store the NATS connection in a variable called <code>nc</code> for later use.</li> <li>Omit the <code>{ nats: false }</code> parameter from the <code>startService</code> function call since we want to connect to the message bus.</li> </ol> <p>Note</p> <p><code>startService</code> actually returns an object containing the NATS connection (<code>nc</code>) and a few other things. In our example, we use destructuring to only get the <code>nc</code> variable. This is equivalent to the following code:</p> <pre><code>const service = await startService();\nconst nc = service.nc;\n</code></pre>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#publishing-messages","title":"Publishing Messages","text":"<p>Publishing messages is as simple as calling the <code>publish</code> function on the NATS connection:</p> <pre><code>await nc.publish(\"subject\"/*(1)!*/, message/*(2)!*/);\n</code></pre> <ol> <li>The subject (sometimes also called channel) to which the message gets published.</li> <li>The message data (also called payload or body).</li> </ol> <p>However, Telestion Hub uses a specific message format for all messages sent over the message bus. A message can be either JSON or a binary message. The binary message is used for sending large amounts of data, e.g., images or video streams. The JSON message is used for all other messages.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#json-messages","title":"JSON Messages","text":"<p>To send a JSON message, you need to create a JSON object and pass it to the <code>publish</code> function:</p> service.ts<pre><code>import {\n    JSONCodec,\n    startService\n} from \"https://deno.land/x/telestion/mod.ts\";\n// or: import { JSONCodec } from \"https://deno.land/x/nats/src/mod.ts\";\n\nconst {nc} = await startService();\n\nconst jsonCodec = JSONCodec();//(2)!\n\nawait nc.publish(\"subject\", jsonCodec.encode/*(3)!*/({\n    foo: \"some arbitrary JSON-compatible data\",\n    bar: 42\n}));\n</code></pre> <ol> <li>Import the <code>JSONCodec</code> (for convenience, this gets re-exported by the <code>lib.ts</code>, but you can also import it directly from the NATS library).</li> <li>Create a new <code>JSONCodec</code> instance.</li> <li>Encode the JSON object using the <code>JSONCodec</code> instance.</li> </ol>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#binary-messages","title":"Binary Messages","text":"<p>To send a binary message, you need to create a <code>Uint8Array</code> containing the bytes and pass it to the <code>publish</code> function:</p> service.ts<pre><code>import {\n    startService\n} from \"https://deno.land/x/telestion/mod.ts\";\n\nconst {nc} = await startService();\n\nawait nc.publish(\"subject\", new Uint8Array([0x01, 0x02, 0x03]));\n</code></pre> <p>Uint8Arrays</p> <p>You can learn more about how you can use <code>Uint8Array</code> on MDN.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#subscribing-to-messages","title":"Subscribing to Messages","text":"<p>There are multiple ways to subscribe to messages on a subject. The most common way is to use the <code>subscribe</code> function in combination with a <code>for await</code> loop:</p> service.ts<pre><code>import {\n    startService\n} from \"https://deno.land/x/telestion/mod.ts\";\n\nconst {nc} = await startService();\n\nconst subjectSubscription/*(1)!*/ = await nc.subscribe(\"subject\"/*(2)!*/);\n\nfor await (const message of subjectSubscription) {//(3)!\n    console.log(message.data);//(4)!\n}\n</code></pre> <ol> <li>Store the subscription in a variable called <code>subjectSubscription</code> for later use.</li> <li>Subscribe to the <code>subject</code> subject.</li> <li>For each message received on the subject, \u2026</li> <li>\u2026 print the message data to the console.</li> </ol> <p>Unfortunately, this won\u2019t decode our JSON messages automatically. We need to do this ourselves:</p> service.ts<pre><code>import {\n    JSONCodec,\n    startService\n} from \"https://deno.land/x/telestion/mod.ts\";\n\nconst {nc} = await startService();\n\nconst jsonCodec = JSONCodec();\n\nconst subjectSubscription = await nc.subscribe(\"subject\");\nfor await (const message of subjectSubscription) {\n    const jsonMessage = jsonCodec.decode(message.data);//(1)!\n    console.log(jsonMessage.foo);//(2)!\n}\n</code></pre> <ol> <li>Decode the message data using the <code>JSONCodec</code> instance.</li> <li>Print the <code>foo</code> property of the decoded JSON message to the console.</li> </ol> <p>Danger</p> <p>Can you spot the problem with this code? What happens if the message data doesn\u2019t contain a <code>foo</code> property? Or if it\u2019s not a JSON message at all? This would lead to our service crashing!</p> <p>Never assume a message\u2019s structure!</p> <p>You should always validate the message data before using it. We\u2019ll cover this in the next section.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#validating-messages","title":"Validating Messages","text":"<p>A Telestion service must validate all messages it receives. This is to ensure that the service doesn\u2019t crash when it receives invalid messages.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#validating-the-message-type","title":"Validating the message type","text":"<p>The first \u201clayer\u201d of validation is the message type. A message can either be a JSON message or a binary message. The <code>jsonCodec.decode</code> function will throw an error if the message data is not a valid JSON message. Therefore, we can use a <code>try</code>/<code>catch</code> block to catch the error and handle it accordingly:</p> service.ts<pre><code>// ...\n\nfor await (const message of subjectSubscription) {\n    try/*(3)!*/{\n        const jsonMessage = jsonCodec.decode(message.data);\n        console.log(jsonMessage.foo);\n    } catch (_e) {\n        console.error/*(2)!*/(\"Received invalid message:\", message);\n    }\n}\n</code></pre> <ol> <li>Catch the error thrown by <code>jsonCodec.decode</code>.</li> <li>Print the error message to the console (or do whatever else you want to do when you receive an invalid message).</li> <li>Wrap the code that decodes the message in a <code>try</code>/<code>catch</code> block.</li> </ol> <p>Binary Messages</p> <p>Since any messages get sent as binary messages (in fact, the <code>JSONCodec</code> does nothing else than convert the JSON message to a <code>Uint8Array</code> and back), there\u2019s no way to validate that a message is supposed to be a binary message. This makes the next section even more important.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#validating-the-message-structure","title":"Validating the message structure","text":"<p>The second \u201clayer\u201d of validation is the message structure. This is where you validate that the message data contains all the properties you expect it to contain. For example, if you expect a message to contain a <code>foo</code> property, you must verify its existence before using it.</p> <p>For structured JSON data, we recommend that you use the <code>zod</code> library for validation. This is also used in our <code>lib.ts</code> file to validate the configuration. You can find more information about <code>zod</code> in the library\u2019s GitHub repository.</p> <p>Let\u2019s create a <code>zod</code> schema for our JSON message in a new file called <code>foo-message.ts</code>:</p> foo-message.ts<pre><code>import {\n    z\n} from \"https://deno.land/x/zod@v3.16.1/mod.ts\";\n\nexport const fooMessageSchema = z.object/*(1)!*/(({\n    foo: z.string()/*(2)!*/,\n    bar: z.number().min(-10)/*(3)!*/\n});\n\nexport type FooMessage = z.infer&lt;typeof fooMessageSchema&gt;;//(4)!\n</code></pre> <ol> <li>A <code>FooMessage</code> must be an object.</li> <li>A <code>FooMessage</code> must have a <code>foo</code> property that is a string.</li> <li>A <code>FooMessage</code> must have a <code>bar</code> property that is a number and is greater than or equal to <code>-10</code>.</li> <li>This is a TypeScript type that represents the <code>FooMessage</code> type. While we won\u2019t use it in this example, it\u2019s good practice to create a type for each schema you create. This allows you to use the type anywhere in your code:    <pre><code>function foo(message: FooMessage) {\n     console.log(message.foo);\n}\n\n// ...\n\nconst fooMessage = fooMessageSchema.parse(\n     jsonCodec.decode(message.data)\n);\nfoo(fooMessage); // This works now!\n</code></pre></li> </ol> <p>Now we can use this schema to validate the message data:</p> service.ts<pre><code>import {\n    fooMessageSchema\n} from \"./foo-message.ts\";\n\n// ...\n\nfor await (const message of subjectSubscription) {\n    try {\n        const jsonMessage = fooMessageSchema.parse/*(1)!*/(\n            jsonCodec.decode(message.data)\n        );\n\n        console.log(jsonMessage/*(2)!*/.foo);\n    } catch (_e) {\n        console.error(\"Received invalid message:\", message);\n    }\n}\n</code></pre> <ol> <li>Validate the message data using the <code>fooMessageSchema</code> schema. This will throw an error if the message data doesn\u2019t match the schema.</li> <li>TypeScript now knows that <code>jsonMessage</code> is a valid <code>FooMessage</code> object. Therefore, we can access the <code>foo</code> property without any problems.</li> </ol> <p>Success</p> <p>If your editor has great TypeScript support and has shown you warnings/errors before, they are now gone! This is because TypeScript now knows that the <code>jsonMessage</code> variable is a valid <code>FooMessage</code> object. In other words, your code is now safe from invalid messages!</p> <p>Binary Messages</p> <p>For binary messages, you can\u2019t use <code>zod</code> to validate the message structure. Instead, you should use the <code>Uint8Array</code> methods to validate the message structure. For example, you can check the length of the message data using the <code>length</code> property of the <code>Uint8Array</code>:</p> <pre><code>if (message.data.length !== 3) {\n    console.error(\"Received invalid message:\", message);\n}\n</code></pre> <p>However, the exact validation required completely depends on your use case. Just make sure that your code doesn\u2019t crash when it receives an invalid message.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#subscribing-to-multiple-topics","title":"Subscribing to Multiple Topics","text":"<p>So far, we\u2019ve used the <code>for await</code> loop. This is a convenient way to subscribe to a single topic. However, if you want to do more than just react to messages from a specific subject, we get into trouble. Since the <code>for await</code> loop is blocking, we can\u2019t do anything else while we\u2019re waiting for messages.</p> <p>We can solve this by wrapping the <code>for await</code> loop in an <code>async</code> function and calling it in a separate thread. This allows us to do other things while we\u2019re waiting for messages:</p> service.ts<pre><code>// ...\n\nconst subjectMessages = nc.subscribe(\"foo\");\n(async () =&gt; {//(1)!\n    for await (const message of subjectMessages) {\n        // Handle messages from the \"foo\" subject\n    }\n})();\n\n// ... (2)\n</code></pre> <ol> <li>Wrap the <code>for await</code> loop in an <code>async</code> function and call it immediately. This will start the subscription in parallel to the rest of the code. </li> <li>Do other things while we\u2019re waiting for messages.</li> </ol> <p>Note that we\u2019re storing the return value of <code>nc.subscribe</code> in a variable outside the <code>async</code> function. This is important so that we can close the subscription or check its status later.</p> <p>Closing the Subscription</p> <p>You can close the subscription by calling the <code>unsubscribe</code> method on the subscription object:</p> <pre><code>const subjectMessages = nc.subscribe(\"foo\");\n// ...\nsubjectMessages.unsubscribe();\n</code></pre> <p>You must call <code>unsubscribe</code> on the subscription object. Calling <code>nc.unsubscribe</code> will unsubscribe from all subscriptions!</p> <p>This now allows us to subscribe to multiple topics:</p> service.ts<pre><code>// ...\n\nconst fooMessages = nc.subscribe(\"foo\");//(1)!\n(async () =&gt; {\n    for await (const message of fooMessages) {\n        // Handle messages from the \"foo\" subject\n    }\n})();\n\nconst barMessages = nc.subscribe(\"bar\");//(2)!\n(async () =&gt; {\n    for await (const message of barMessages) {\n        // Handle messages from the \"bar\" subject\n        if (shouldUnsubscribeFoo(message))\n            fooMessages.unsubscribe/*(3)!*/();\n\n        if (shouldUnsubscribeBar(message))\n            barMessages.unsubscribe/*(4)!*/();\n    }\n})();\n\nawait Promise.all/*(5)!*/([\n    fooMessages.closed,\n    barMessages.closed\n]);\n\nconsole.log(\"All subscriptions closed!\");//(6)!\n</code></pre> <ol> <li>Subscribe to the <code>foo</code> subject.</li> <li>Subscribe to the <code>bar</code> subject (in parallel to the <code>foo</code> subscription).</li> <li>Unsubscribe from the <code>foo</code> subject if the <code>shouldUnsubscribeFoo</code> function returns <code>true</code>.</li> <li>Unsubscribe from the <code>bar</code> subject if the <code>shouldUnsubscribeBar</code> function returns <code>true</code>.</li> <li>Wait for both subscriptions to close. This will happen when the <code>unsubscribe</code> method is called on the subscription object.<p> The <code>closed</code> property is a <code>Promise</code> that resolves when the subscription is closed.<p> <code>Promise.all</code> is a convenient way to wait for multiple promises to resolve. It returns a <code>Promise</code> that resolves when all promises passed to it have resolved. <li>Log a message when both subscriptions are closed.</li>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#queue-groups","title":"Queue Groups","text":"<p>Info</p> <p>Queue groups are a way to distribute messages between multiple subscribers. If you have multiple subscribers to a subject, you can use queue groups to distribute messages between them. This is useful if you want to distribute messages between multiple instances of a service (for example, if you want to scale your service horizontally because processing a message takes too long).</p> <p>All you have to do to use queue groups is to pass a <code>queue</code> option to the <code>subscribe</code> method. You can use any string as the queue name, but by its definition, the <code>SERVICE_NAME</code> configuration parameter works perfect for this. For convenience, this gets exposed as <code>serviceName</code> on the object returned by <code>startService</code>:</p> service.ts<pre><code>// ...\n\nconst {\n    nc,\n    serviceName/*(1)!*/\n} = await startService();\n\nconst fooMessages = nc.subscribe(\n    \"foo\", \n    {queue: serviceName/*(2)!*/}\n);\n(async () =&gt; {\n    for await (const message of fooMessages) {\n        // Handle messages from the \"foo\" subject\n    }\n})();\n\n// ...\n</code></pre> <ol> <li>Get the <code>serviceName</code> from the object returned by <code>startService</code>.</li> <li>Pass the <code>serviceName</code> as the <code>queue</code> option to the <code>subscribe</code> method.</li> </ol> <p>If you now run multiple instances of your service, you\u2019ll see that messages are distributed between them. This is because the <code>queue</code> option tells the message bus to distribute messages between all subscribers with the same queue name.</p> <p>Service names in development mode</p> <p>When you run your service in development mode, the <code>serviceName</code> will be generated. This means that you\u2019ll get a different service name every time you start your service. To avoid this, you can either set the <code>SERVICE_NAME</code> environment variable or pass a service name via the CLI:</p> <pre><code>deno run --allow-all service.ts --dev --SERVICE_NAME=foo\n</code></pre>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#wildcards","title":"Wildcards","text":"<p>Wildcards are a way to subscribe to multiple subjects at once. This is useful if you want to subscribe to multiple subjects that have a common prefix. For example, you could have a service that handles all requests to the <code>/api</code> endpoint. You could then subscribe to all requests to the <code>/api</code> endpoint by subscribing to the <code>api.&gt;</code> subject.</p> <p>There are two types of wildcards: <code>*</code> and <code>&gt;</code>. The <code>*</code> wildcard matches a single token. The <code>&gt;</code> wildcard matches one or more tokens. For example, the <code>api.*</code> subject matches <code>api.foo</code> and <code>api.bar</code>, but not <code>api.foo.bar</code>. The <code>api.&gt;</code> subject matches <code>api.foo</code>, <code>api.bar</code>, and <code>api.foo.bar</code>.</p> <p>You can use wildcards in the <code>subscribe</code> method and then use the <code>subject</code> property of the message to check which subject the message was sent to:</p> service.ts<pre><code>// ...\n\n/**\n * A simple key-value store.\n */\nconst store: Record&lt;string, unknown&gt; = {};\n\nconst kvMessages = nc.subscribe/*(1)!*/(\"kv.&gt;\");\n(async () =&gt; {\n    for await (const message of kvMessages) {\n        try {\n            const [_kv, action, ...keyParts] =\n                message.subject.split/*(2)!*/(\".\");\n\n            const key = keyParts.join(\".\");\n\n            if (action === \"get\") {\n                // retrieve the value from the store\n                message.respond(\n                    jsonCodec.encode(store[key])\n                );\n            } else if (action === \"set\") {\n                // set the value in the store\n                store[key] = jsonCodec.decode(message.data);\n                message.respond(jsonCodec.encode({ok: true});\n            }\n        } catch (error) {\n            message.respond(\n                jsonCodec.encode({error: error.message})\n            );\n        }\n    }\n})();\n</code></pre> <ol> <li>Subscribe to the <code>kv.&gt;</code> subject. This matches all subjects that start with <code>kv.</code>.</li> <li>Split the subject into tokens. The first token is <code>kv</code>, the second token is the action, and the rest of the tokens are the key. We store these into variables using array destructuring.</li> </ol> <p>In this example, we subscribe to the <code>foo.*</code> subject. We then use the <code>subject</code> property of the message to check which action was requested. If the action is <code>get</code>, we get the value from the <code>store</code> object and respond with it. If the action is <code>set</code>, we set the value in the <code>store</code> object.</p> <p>For example, if we send a message to the <code>foo.get.bar</code> subject, we\u2019ll get the value of the <code>bar</code> key in the <code>store</code> object. If we send a message to the <code>foo.set.bar</code> subject with the value <code>42</code>, we\u2019ll set the value of the <code>bar</code> key in the <code>store</code> object to <code>42</code>.</p> <p>Success</p> <p>Woohoo! You\u2019ve just re-implemented a key-value store using the message bus, which (with a few convenience features on top) is an essential part of Telestion\u2019s standard services! </p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#requestreply","title":"Request/Reply","text":"<p>So far, we\u2019ve looked at publishing messages and subscribing to messages. However, there\u2019s one more thing we can do with the message bus: request/reply.</p> <p>Request/reply is a pattern where one service sends a request to another service and waits for a response. This is useful if you want to get data from another service. For example, you could have a service that stores data in a database. Other services can then request data from this service.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#sending-a-request","title":"Sending a Request","text":"<p>Let\u2019s start by looking at how we can send a request. We can use the <code>request</code> method on the <code>NatsConnection</code> object to send a request. This makes it incredibly easy to send a request:</p> service.ts<pre><code>// ...\n\nconst response = await nc.request/*(1)!*/(\n    \"fooRequest\"/*(2)!*/,\n    jsonCodec.encode({foo: \"bar\"})/*(3)!*/\n);\nconsole.log(response.data);\n</code></pre> <ol> <li>Call the <code>request</code> method on the <code>NatsConnection</code> object. This method returns a <code>Promise</code> that resolves when the response is received. The response has the same form as the messages we\u2019ve already seen in our <code>for await</code> loops.</li> <li>Specify the subject to send the request to.</li> <li>Encode the request message data using the <code>jsonCodec</code> codec. This is the same as we\u2019ve done before.</li> </ol> <p>Tip: Specifying a timeout</p> <p>As it is, our code will wait forever for a response. This is probably not what we want. We can specify a timeout by passing a second argument to the <code>request</code> method:</p> <pre><code>const response = await nc.request(\n    \"fooRequest\", \n    jsonCodec.encode({foo: \"bar\"}),\n    {timeout: 1000}\n);\n</code></pre> <p>This will cause the <code>request</code> method to reject the <code>Promise</code> if no response is received within 1000 milliseconds. Make sure to handle the rejection by handling it appropriately.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#handling-a-request","title":"Handling a Request","text":"<p>Now that we know how to send a request, let\u2019s look at how we can handle a request. We can use the <code>subscribe</code> method on the <code>NatsConnection</code> object to subscribe to a subject. This allows us to handle requests:</p> service.ts<pre><code>// ...\n\nconst requestMessages = nc.subscribe/*(1)!*/(\"fooRequest\");\n\n(async () =&gt; {\n    for await (const message of requestMessages) {//(2)!\n        message.respond/*(3)!*/(jsonCodec.encode({bar: \"baz\"}));\n    }\n})();\n</code></pre> <ol> <li>Subscribe to the <code>fooRequest</code> subject as usual.</li> <li>Iterate over the messages received from the <code>fooRequest</code> subject as usual.</li> <li>Respond to the request by calling the <code>respond</code> method on the message object. This method takes a single argument: the response message data. This is the same as we\u2019ve done before.</li> </ol> <p>Tip</p> <p>The <code>message</code> received from the <code>fooRequest</code> subject is the same as the <code>message</code> received from the <code>foo</code> subject. This means that we can use the same steps to handle the message as we\u2019ve done before if we need the data to handle the request.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/message-bus/#related-links","title":"Related Links","text":"<p>While we\u2019ve covered the basics of interacting with the message bus in this article, there are a few more things you can do with the message bus. You can find more information about the message bus in the NATS documentation. While the connection to the message bus is handled by the <code>startService</code> function, topics like receiving and sending messages are covered more extensively (including useful concepts like request/reply, queue groups, etc.) in the NATS documentation.</p>","tags":["Backend","TypeScript"]},{"location":"Backend%20Development/typescript/samples/","title":"Samples","text":"<p>You can find even more samples in the project\u2019s GitHub repository under <code>backend-deno/samples</code>:</p> <p>Browse samples on GitHub</p>"},{"location":"Backend%20Development/typescript/samples/#running-the-samples","title":"Running the samples","text":"<p>You can run all the samples using the <code>docker-compose.yml</code> file in the linked folder. Just run the following command:</p> <pre><code>docker-compose up\n</code></pre> <p>This will run all the samples, including the required NATS server.</p>"},{"location":"Deployment/","title":"Deployment","text":"<p>Deployment is the process of making a software system available for use. In the context of Telestion, deployment refers to the process of making the Telestion application available for use.</p> <p>Warning</p> <p>The deployment process is heavily dependent on the specific use case. The following documentation is intended to give a general overview of the deployment process that\u2019s available by default in new Telestion Projects.</p> <p>Depending on your project, you may need to adapt the deployment process to your specific needs.</p>","tags":["Deployment"]},{"location":"Deployment/#deployment-methods","title":"Deployment Methods","text":"<p>Telestion can be deployed in multiple ways:</p> <ul> <li>Local Deployment</li> <li>Docker Deployment</li> <li>Kubernetes Deployment</li> </ul> <p>Info</p> <p>The local deployment is the easiest way to get started with Telestion. You should probably start with the local deployment and then move on to the other deployment methods as needed.</p>","tags":["Deployment"]},{"location":"Deployment/#nats-and-its-configuration","title":"NATS and its configuration","text":"<p>Telestion uses NATS as its message broker. NATS is a lightweight, high-performance cloud-native messaging system. It is used for the communication between the Telestion backend and the Telestion frontend.</p> <p>No matter which deployment method you choose, you need to configure NATS. The configuration of NATS is described in the NATS Configuration document.</p>","tags":["Deployment"]},{"location":"Deployment/concepts/","title":"Concepts","text":"<p>This document describes the pre-requisites for deploying Telestion on your local machine.</p>","tags":["Deployment"]},{"location":"Deployment/concepts/#docker","title":"Docker","text":"<p>Docker is a containerization platform that allows you to package your application and all its dependencies together in the form of containers to ensure that your application works seamlessly in any environment be it development or test or production.</p>","tags":["Deployment"]},{"location":"Deployment/concepts/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application\u2019s services. Then, with a single command, you create and start all the services from your configuration.</p>","tags":["Deployment"]},{"location":"Deployment/concepts/#kubernetes","title":"Kubernetes","text":"<p>Info</p> <p>Kubernetes is not required for deploying Telestion. It\u2019s mostly relevant for big production deployments.</p> <p>Kubernetes is an open source container-orchestration system for automating computer application deployment, scaling, and management.</p>","tags":["Deployment"]},{"location":"Deployment/concepts/#web-server","title":"Web Server","text":"<p>Info</p> <p>For Telestion, a web server is required to serve the frontend application to the user.</p> <p>A web server is server software, or hardware dedicated to running said software, that can satisfy web client requests. A web server can, in general, contain one or more websites. A web server processes incoming network requests over HTTP and several other related protocols.</p>","tags":["Deployment"]},{"location":"Deployment/concepts/#nats","title":"NATS","text":"<p>Info</p> <p>Telestion uses NATS as a message broker. It\u2019s required for the communication between the Telestion services (both backend and frontend).</p> <p>NATS is a simple, secure and high-performance open source messaging system for cloud native applications, IoT messaging, and microservice architectures.</p>","tags":["Deployment"]},{"location":"Deployment/docker/","title":"Docker Deployment","text":"<p>This document describes how to deploy Telestion using Docker.</p>"},{"location":"Deployment/docker/#guidelines","title":"Guidelines","text":"<p>These guidelines are not strict rules, but they are recommended to follow. If you have a good reason to deviate from them, feel free to do so. Or in other words: If you don\u2019t know why you should deviate from them, don\u2019t do it.</p>"},{"location":"Deployment/docker/#images-per-service-type","title":"Images per Service Type","text":"<p>Depending on your project, it might make sense to have individual images for each service. However, for smaller projects, this is often both unnecessary and cumbersome. In this case, it is recommended to have one image for all services of a specific type.</p> <p>For example, you would have one image for all Deno based Backend services, one for the frontend, and so on. This way, you won\u2019t have to build and push huge numbers of images, and you can still use the same image for all services of a specific type.</p>"},{"location":"Deployment/docker/#dependency-installation-at-build-time","title":"Dependency Installation at Build Time","text":"<p>If you have a service that requires dependencies to be installed, it is recommended to do so at build time. This way, you can be sure that the dependencies are installed when the image is built, and you don\u2019t have to wait for them to be installed when the container is started.</p> <p>This ensures both a faster startup time and a consistent execution environment.</p>"},{"location":"Deployment/kubernetes/","title":"Kubernetes Deployment","text":"<p>This document describes how to deploy Telestion using Kubernetes.</p> <p>(Work in progress)</p>"},{"location":"Deployment/local/","title":"Local Deployment","text":"<p>Telestion can be deployed locally on your machine. This can have several reasons, for example:</p> <ul> <li>You want to test your application before deploying it to a server</li> <li>You want to develop an application and test it locally</li> <li>You want to run Telestion on a machine without internet connection</li> <li>You want to run Telestion on a machine without Docker/Kubernetes</li> <li>You need to access the machine directly (for example, for CAN bus access)</li> </ul> <p>Note</p> <p>It\u2019s a common tactic to have most Telestion services running in a cloud environment and only the services that need direct access to the machine running locally.</p> <p>This is easy to achieve thanks to NATS and means that you can have the best of both worlds.</p>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-nats/","title":"Deploying NATS","text":"<p>NATS isn\u2019t complicated to deploy. This guide will show you how to deploy NATS locally.</p>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-nats/#installing-nats","title":"Installing NATS","text":"<p>Download the NATS server from the NATS download page.</p>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-nats/#running-nats","title":"Running NATS","text":"<p>Run the NATS server with the following command:</p> <pre><code>nats-server\n</code></pre>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-nats/#configuring-nats","title":"Configuring NATS","text":"<p>NATS can be configured using a configuration file. To run NATS with a configuration file, use the following command:</p> <pre><code>nats-server -c &lt;path-to-config-file&gt;\n</code></pre> <p>As a starting point, you can use the following configuration to enable everything you need while developing:</p> nats.conf<pre><code>http_port: 8222\n\nwebsocket: {\n     port: 9222\n     no_tls: true\n}\n</code></pre> <p>This will enable the HTTP and WebSocket interfaces.</p> <p>Note that for production deployments, you need to configure NATS to use TLS and set up proper authentication. You can learn more about configuring NATS in the NATS configuration guide.</p> <p>Learn more about NATS configuration</p>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-typescript-service/","title":"Deploying TypeScript services","text":"","tags":["Deployment","Local"]},{"location":"Deployment/local/local-typescript-service/#deploying-a-single-service","title":"Deploying a single service","text":"<p>(coming soon)</p>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-typescript-service/#deploying-multiple-services-using-the-process-manager-pup","title":"Deploying multiple services using the process manager <code>pup</code>","text":"<p>The process manager <code>pup</code> is a tool that can be used to run multiple services at once without having to manually start each service. It also makes it easy to manage the running services.</p>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-typescript-service/#installing-pup","title":"Installing <code>pup</code>","text":"<p>Install <code>pup</code> using the following command:</p> <pre><code>deno install -Afr https://deno.land/x/pup/pup.ts\n</code></pre>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-typescript-service/#configuring-pup","title":"Configuring <code>pup</code>","text":"<p>In your project\u2019s root directory, create a file called <code>pup.jsonc</code> with the following contents:</p> <pre><code>{\n  \"services\": [\n    {\n      \"name\": \"service1\",\n      \"command\": \"deno run --allow-net --allow-env service1.ts\",\n      \"env\": {\n        \"SERVICE_NAME\": \"service1\",\n        \"NATS_URL\": \"nats://localhost:4222\",\n        \"NATS_USER\": \"service\",\n        \"NATS_PASSWORD\": \"service\"\n      }\n    },\n    {\n      \"name\": \"service2\",\n      \"command\": \"deno run --allow-net --allow-env service2.ts\",\n      \"env\": {\n        \"SERVICE_NAME\": \"service1\",\n        \"NATS_URL\": \"nats://localhost:4222\",\n        \"NATS_USER\": \"service\",\n        \"NATS_PASSWORD\": \"service\"\n      }\n    }\n  ]\n}\n</code></pre>","tags":["Deployment","Local"]},{"location":"Deployment/local/local-typescript-service/#running-pup","title":"Running <code>pup</code>","text":"<p>Run <code>pup</code> using the following command:</p> <pre><code>pup -c pup.jsonc run\n</code></pre> <p>This will start the pup runner. To start the services, run the following command:</p> <pre><code>pup -c pup.jsonc start all\n</code></pre> <p>Tip</p> <p>If you want to have a service starting immediately after the runner starts, you can add <code>\"autostart\": true</code> to that service\u2019s configuration.</p> <p>To stop the services, run the following command:</p> <pre><code>pup -c pup.jsonc stop all\n</code></pre> <p>Tip</p> <p>You can also stop a single service by specifying its name instead of <code>all</code>.</p> <p>You can get the status of the services using the following command:</p> <pre><code>pup -c pup.jsonc status\n</code></pre> <p>Tip: Running NATS through <code>pup</code></p> <p>You can even run NATS through <code>pup</code>. Just add the following service to your <code>pup.jsonc</code> file:</p> <pre><code>{\n  \"name\": \"nats\",\n  \"command\": \"nats-server -c &lt;path-to-config-file&gt;\",\n  \"env\": {}\n}\n</code></pre> <p>You can find more information about <code>pup</code> on their documentation page.</p>","tags":["Deployment","Local"]},{"location":"Deployment/nats/","title":"NATS Server Configuration","text":"<p>The NATS server can be configured using both a configuration file and environment variables.</p>"},{"location":"Deployment/nats/#environment-variables","title":"Environment Variables","text":"<p>The NATS server configuration is done via environment variables. The following table lists all available environment variables and their default values.</p> Environment Variable Default Value Description <code>NATS_HOST</code> <code>localhost</code> The host of the NATS server. <code>NATS_PORT</code> <code>4222</code> The port of the NATS server."},{"location":"Deployment/nats/#configuration-file","title":"Configuration File","text":"<p>The NATS server can also be configured using a configuration file. To use a configuration file, you need to pass the <code>-c</code> flag to the NATS server:</p> <pre><code>nats-server -c &lt;path-to-config-file&gt;\n</code></pre> <p>You can find a full reference of the NATS server configuration in the NATS documentation.</p> <p>For Telestion, the following settings are of special interest:</p> <ol> <li><code>websocket</code> - This section configures the WebSocket interface of the NATS server. It\u2019s used by the Telestion frontend to connect to the NATS server.</li> <li><code>authorization</code> - This section configures who can publish and subscribe to which subjects.</li> <li><code>authorization.users</code>  - This section configures the user accounts that can connect to the NATS server. It\u2019s used to configure the user accounts that can connect to the NATS server. As of right now, Telestion exclusively supports username/password-based authentication.</li> </ol>"},{"location":"Deployment/nats/#development-configuration","title":"Development Configuration","text":"<p>The following configuration is a good starting point for development.</p> <p>Danger</p> <p>Do not use this configuration in production! It\u2019s only meant for development.</p> <p>There are several problems with this configuration that make it unsuitable for production:</p> <ol> <li>it doesn\u2019t use TLS for the websocket interface, meaning that all communication is unencrypted</li> <li>it doesn\u2019t have any authentication or authorization configured, meaning that anyone can connect to the NATS server and publish/subscribe to any subject</li> </ol> <p>In essence, if you were to use this configuration in production, you would have a NATS server that is publicly accessible and allows anyone with access to your server to publish/subscribe to any subject!</p> nats.conf<pre><code>http_port: 8222\n\nwebsocket: {\n    port: 9222\n    no_tls: true\n}\n</code></pre>"},{"location":"Frontend%20Development/","title":"Frontend","text":"<p>Processing data is only half the fun. To make the data accessible to the user, you need a frontend.</p> <p>Telestion uses a frontend based on React, TypeScript, and Bootstrap.  Thankfully, Telestion (together with vite) provides a lot of tools to make frontend development as easy as possible.</p> <p>All you need to get started is an installation of Node.js and pnpm.</p>"},{"location":"Frontend%20Development/#creating-a-new-frontend","title":"Creating a new Frontend","text":"<p>To create a new frontend, create a new directory for it:</p> <pre><code>mkdir telestion-frontend &amp;&amp; cd telestion-frontend\n</code></pre> <p>Now, add the following files to your directory:</p>"},{"location":"Frontend%20Development/#packagejson","title":"<code>package.json</code>","text":"<pre><code>{\n  \"name\": \"telestion-frontend\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"@wuespace/telestion\": \"^1.0.0-alpha.2\",// (1)!\n    \"react\": \"^18.2.0\",\n    \"zod\": \"^3.22.4\"// (2)!\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-react-swc\": \"^3.5.0\",\n    \"vite\": \"^5.0.8\"\n  }\n}\n</code></pre> <ol> <li>Add the <code>@wuespace/telestion</code> package as a dependency. This package contains all the tools you need to get started with frontend development.</li> <li>Add the <code>zod</code> package as a dependency. This package is used to validate any data that is sent to the frontend.</li> </ol>"},{"location":"Frontend%20Development/#viteconfigts","title":"<code>vite.config.ts</code>","text":"<pre><code>import { defineConfig } from \"vite\";\nimport react from '@vitejs/plugin-react-swc';\n\nexport default defineConfig({\n  plugins: [react()/*(1)!*/],\n});\n</code></pre> <ol> <li>Add the <code>react</code> plugin to vite. This plugin allows you to use React in your frontend.</li> </ol>"},{"location":"Frontend%20Development/#indexhtml","title":"<code>index.html</code>","text":"<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Telestion Frontend&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body data-bs-theme=\"dark\"&gt;&lt;!-- (1)! --&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;&lt;!-- (2)! --&gt;\n    &lt;script type=\"module\" src=\"/index.ts\"&gt;&lt;/script&gt;&lt;!-- (3)! --&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Add the <code>data-bs-theme</code> attribute to the <code>body</code> tag. This attribute is used to set the default theme of the frontend. You can choose between <code>light</code> and <code>dark</code>.</li> <li>Add a <code>div</code> tag with the id <code>root</code>. This is where your frontend will be rendered.</li> <li>Add a <code>script</code> tag that loads the <code>index.ts</code> file. This file is the entry point of your frontend.</li> </ol>"},{"location":"Frontend%20Development/#indexts","title":"<code>index.ts</code>","text":"<pre><code>import { initTelestion, registerWidgets } from \"@wuespace/telestion\"; // (1)!\n\nimport \"@wuespace/telestion/telestion.css\"; // (2)!\n\n// initialize Telestion\nawait initTelestion/* (3)!*/({\n  version: \"1.0.0\",// (4)!\n});\n\n// register your widget in Telestion\n// registerWidgets(...);// (5)! \n</code></pre> <ol> <li>Import the <code>initTelestion</code> and <code>registerWidgets</code> functions from the <code>@wuespace/telestion</code> package.</li> <li>Import the <code>telestion.css</code> file from the <code>@wuespace/telestion</code> package. This file contains all the styles (including all Bootstrap styles) you need to get started with frontend development.</li> <li>Initialize Telestion. This sets up a basic frontend including authentication, dashboards, etc.</li> <li>Set the version of your frontend. This is used to check if the user data needs to be migrated.</li> <li>Register your widgets in Telestion. This is explained in more detail in the next section.</li> </ol>"},{"location":"Frontend%20Development/#installing-dependencies","title":"Installing Dependencies","text":"<p>To install the dependencies, run the following command:</p> <pre><code>pnpm install\n</code></pre>"},{"location":"Frontend%20Development/#running-the-frontend","title":"Running the Frontend","text":"<p>To run the frontend, run the following command:</p> <pre><code>pnpm dlx vite\n</code></pre> <p>This will start a development server on port 5173. You can now open your browser and navigate to  http://localhost:5173.</p>"},{"location":"Frontend%20Development/#building-the-frontend","title":"Building the Frontend","text":"<p>To build the frontend, run the following command:</p> <pre><code>pnpm dlx vite build\n</code></pre>"},{"location":"Frontend%20Development/#next-steps","title":"Next Steps","text":"<p>Now that you have a basic frontend running, you should have a look at how to add widgets to it.</p>"},{"location":"Frontend%20Development/concepts/","title":"Concepts","text":"<p>This document describes the various concepts you need to know when building components for the Telestion frontend.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#overview","title":"Overview","text":"<p>You can find the most important concepts of the Telestion frontend as well as how they relate to each other in the following diagram:</p> <pre><code>graph BT\n  frontend[Telestion Frontend] --&gt;|is written in|react[React]\n  react --&gt;|uses the programming language|ts[TypeScript]\n  user[User] --&gt;|uses|frontend\n  subgraph frontend[Telestion Frontend]\n    dashboard[Dashboard]\n    widgetInstance[Widget Instances]\n    widget[Widgets]\n  end\n  dashboard[Dashboard] --&gt;|is a layout of|widgetInstance[Widget Instances]\n  widget --&gt;|defines the look and behavior of|widgetInstance[Widget Instances]\n  click widgetInstance \"#widget-instances\" \"Widget Instance\"\n  click widget \"#widget\" \"Widget\"\n  click dashboard \"#dashboard\" \"Dashboard\"\n  click react \"#react\" \"React\"\n  click ts \"#typescript\" \"TypeScript\"</code></pre> <p>You can click on the elements in the diagram to learn more about them.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#frontend","title":"Frontend","text":"<p>The Telestion frontend is the part of Telestion that is visible to the user. It is built with React and TypeScript. It is responsible for displaying data from the backend and for sending commands to the backend.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#dashboard","title":"Dashboard","text":"<p>A dashboard is a layout of widget instances with a specific configuration, created by the user. They are the main part of the Telestion frontend.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#widget-instances","title":"Widget Instances","text":"<p>A widget instance is an instance of a widget with a specific configuration. They are the building blocks of dashboards.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#widget","title":"Widget","text":"<p>A widget is the type of a widget instance. It contains the code that defines how the widget instance looks like and how it behaves.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#htmlcssjavascript","title":"HTML/CSS/JavaScript","text":"<p>HTML, CSS, and JavaScript are the three core technologies of the web. HTML is used to describe the structure of web pages. CSS is used to describe the presentation of web pages. JavaScript is used to describe the behavior of web pages.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#react","title":"React","text":"<p>The Telestion frontend is built with React. React is a JavaScript library for building user interfaces. It is component-based and declarative. This means that you can build your UI from small, reusable components and that you can describe how your UI should look like without having to worry about how it is rendered.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#components","title":"Components","text":"<p>Components are the building blocks of React applications. They are small, reusable pieces of code that can be composed to build more complex components. Components can be either functional or class-based. Functional components are just functions that return a React element.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#jsx","title":"JSX","text":"<p>JSX is a syntax extension to JavaScript that allows you to write HTML-like code in your JavaScript files. It is not required to use JSX when writing React applications, but it is recommended. JSX makes your code more readable and easier to write. It also allows you to use the full power of JavaScript inside your HTML-like code.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#props","title":"Props","text":"<p>Props are the way to pass data from a parent component to a child component. They are immutable and can only be changed by the parent component. Props are passed to a component as attributes in JSX.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#state","title":"State","text":"<p>State is the way to store data inside a component. It is mutable and can be changed by the component itself.</p> <p>You can initialize and use state using the <code>useState()</code> hook like this:</p> <pre><code>const [counter, setCounter] = useState(0); // initialize with 0\nsetCounter(counter + 1); // increase counter by 1\n</code></pre>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#hooks","title":"Hooks","text":"<p>Hooks are a new feature that was introduced in React 16.8. They allow you to use state and other React features without writing a class. Hooks are functions that can be called inside functional components. They allow you to use state and other React features without writing a class.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/concepts/#typescript","title":"TypeScript","text":"<p>The Telestion frontend is written in TypeScript. TypeScript is a superset of JavaScript that adds static typing to the language. It is a strict superset of JavaScript, which means that any valid JavaScript code is also valid TypeScript code. TypeScript is a statically typed language, which means that the type of a variable is known at compile time. This allows the compiler to catch many errors at compile time instead of at runtime.</p>","tags":["Frontend Development"]},{"location":"Frontend%20Development/api/","title":"Index","text":""},{"location":"Frontend%20Development/api/#modules","title":"Modules","text":"<ul> <li>application</li> <li>auth</li> <li>index</li> <li>nats</li> <li>user-data</li> <li>utils</li> <li>widget</li> </ul>"},{"location":"Frontend%20Development/api/application/","title":"Index","text":"<p>@wuespace/telestion / application</p> <p>This package provides the main entry point for the Telestion frontend application.</p> <p>You can initialize the application by calling the initTelestion function.</p>"},{"location":"Frontend%20Development/api/application/#example","title":"Example","text":"<pre><code>import { initTelestion } from '@wuespace/telestion/application';\n// or, for convenience:\n// import { initTelestion } from '@wuespace/telestion';\n\ninitTelestion({ ... });\n</code></pre>"},{"location":"Frontend%20Development/api/application/#functions","title":"Functions","text":"<ul> <li>initTelestion</li> </ul>"},{"location":"Frontend%20Development/api/application/#references","title":"References","text":""},{"location":"Frontend%20Development/api/application/#telestionoptions","title":"TelestionOptions","text":"<p>Re-exports TelestionOptions</p>"},{"location":"Frontend%20Development/api/application/#usewidgetconfig","title":"useWidgetConfig","text":"<p>Re-exports useWidgetConfig</p>"},{"location":"Frontend%20Development/api/application/functions/initTelestion/","title":"initTelestion","text":"<p>@wuespace/telestion / application / initTelestion</p> <p>initTelestion(<code>options</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Initialize the Telestion application.</p>"},{"location":"Frontend%20Development/api/application/functions/initTelestion/#parameters","title":"Parameters","text":"<p>\u2022 options: <code>TelestionOptions</code></p> <p>The options for initializing the application.</p>"},{"location":"Frontend%20Development/api/application/functions/initTelestion/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p> <p>A Promise that resolves once the initialization is completed.</p>"},{"location":"Frontend%20Development/api/auth/","title":"Index","text":"<p>@wuespace/telestion / auth</p> <p>Functions and types relating to the authentication of users in the Telestion frontend.</p> <p>Note that in most cases, you don\u2019t need to import anything from this package directly, since auth*n is already handled by the framework itself.</p>"},{"location":"Frontend%20Development/api/auth/#example","title":"Example","text":"<pre><code>import { ... } from '@wuespace/telestion/auth';\n</code></pre>"},{"location":"Frontend%20Development/api/auth/#classes","title":"Classes","text":"<ul> <li>LoginError</li> </ul>"},{"location":"Frontend%20Development/api/auth/#interfaces","title":"Interfaces","text":"<ul> <li>ErrorMessages</li> <li>User</li> </ul>"},{"location":"Frontend%20Development/api/auth/#functions","title":"Functions","text":"<ul> <li>attemptAutoLogin</li> <li>getNatsConnection</li> <li>getUser</li> <li>isLoggedIn</li> <li>login</li> <li>logout</li> <li>setNatsConnection</li> <li>setUser</li> <li>useNatsSubscription</li> </ul>"},{"location":"Frontend%20Development/api/auth/#references","title":"References","text":""},{"location":"Frontend%20Development/api/auth/#usenats","title":"useNats","text":"<p>Re-exports useNats</p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/","title":"LoginError","text":"<p>@wuespace/telestion / auth / LoginError</p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#extends","title":"Extends","text":"<ul> <li><code>Error</code></li> </ul>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#constructors","title":"Constructors","text":""},{"location":"Frontend%20Development/api/auth/classes/LoginError/#new-loginerrormessages","title":"new LoginError(messages)","text":"<p>new LoginError(<code>messages</code>): <code>LoginError</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#parameters","title":"Parameters","text":"<p>\u2022 messages: <code>ErrorMessages</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#returns","title":"Returns","text":"<p><code>LoginError</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#overrides","title":"Overrides","text":"<p><code>Error.constructor</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/auth/classes/LoginError/#message","title":"message","text":"<p>message: <code>string</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#inherited-from","title":"Inherited from","text":"<p><code>Error.message</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#messages","title":"messages","text":"<p>messages: <code>ErrorMessages</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#name","title":"name","text":"<p>name: <code>string</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#inherited-from_1","title":"Inherited from","text":"<p><code>Error.name</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#stack","title":"stack?","text":"<p>stack?: <code>string</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#inherited-from_2","title":"Inherited from","text":"<p><code>Error.stack</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#preparestacktrace","title":"prepareStackTrace?","text":"<p><code>static</code> prepareStackTrace?: (<code>err</code>, <code>stackTraces</code>) =&gt; <code>any</code></p> <p>Optional override for formatting stack traces</p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#parameters_1","title":"Parameters","text":"<p>\u2022 err: <code>Error</code></p> <p>\u2022 stackTraces: <code>CallSite</code>[]</p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#returns_1","title":"Returns","text":"<p><code>any</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#see","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#inherited-from_3","title":"Inherited from","text":"<p><code>Error.prepareStackTrace</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#stacktracelimit","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#inherited-from_4","title":"Inherited from","text":"<p><code>Error.stackTraceLimit</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/auth/classes/LoginError/#capturestacktrace","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt</code>?): <code>void</code></p> <p>Create .stack property on a target object</p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#parameters_2","title":"Parameters","text":"<p>\u2022 targetObject: <code>object</code></p> <p>\u2022 constructorOpt?: <code>Function</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/auth/classes/LoginError/#inherited-from_5","title":"Inherited from","text":"<p><code>Error.captureStackTrace</code></p>"},{"location":"Frontend%20Development/api/auth/functions/attemptAutoLogin/","title":"attemptAutoLogin","text":"<p>@wuespace/telestion / auth / attemptAutoLogin</p> <p>attemptAutoLogin(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Attempt to auto-login using credentials stored in sessionStorage.</p> <p>The credentials will automatically be cleared if they are invalid, the session ends, or logout is called.</p> <p>Credentials are automatically stored updated by login and logout.</p>"},{"location":"Frontend%20Development/api/auth/functions/attemptAutoLogin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>true if auto-login was successful, false otherwise</p>"},{"location":"Frontend%20Development/api/auth/functions/getNatsConnection/","title":"getNatsConnection","text":"<p>@wuespace/telestion / auth / getNatsConnection</p> <p>getNatsConnection(): <code>null</code> | <code>NatsConnection</code></p>"},{"location":"Frontend%20Development/api/auth/functions/getNatsConnection/#returns","title":"Returns","text":"<p><code>null</code> | <code>NatsConnection</code></p>"},{"location":"Frontend%20Development/api/auth/functions/getUser/","title":"getUser","text":"<p>@wuespace/telestion / auth / getUser</p> <p>getUser(): <code>null</code> | <code>User</code></p> <p>Returns the user object if the user is currently logged in, else returns <code>null</code> if no user is currently logged in.</p>"},{"location":"Frontend%20Development/api/auth/functions/getUser/#returns","title":"Returns","text":"<p><code>null</code> | <code>User</code></p>"},{"location":"Frontend%20Development/api/auth/functions/isLoggedIn/","title":"isLoggedIn","text":"<p>@wuespace/telestion / auth / isLoggedIn</p> <p>isLoggedIn(): <code>boolean</code></p> <p>Checks if a user is logged in.</p>"},{"location":"Frontend%20Development/api/auth/functions/isLoggedIn/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the user is logged in, <code>false</code> otherwise.</p>"},{"location":"Frontend%20Development/api/auth/functions/login/","title":"Login","text":"<p>@wuespace/telestion / auth / login</p> <p>login(<code>natsUrl</code>, <code>username</code>, <code>password</code>): <code>Promise</code>&lt;<code>null</code> | <code>User</code>&gt;</p> <p>Logs in a user with the given credentials.</p>"},{"location":"Frontend%20Development/api/auth/functions/login/#parameters","title":"Parameters","text":"<p>\u2022 natsUrl: <code>string</code></p> <p>The url to connect to the NATS server.</p> <p>\u2022 username: <code>string</code></p> <p>The username for authentication.</p> <p>\u2022 password: <code>string</code></p> <p>The password for authentication.</p>"},{"location":"Frontend%20Development/api/auth/functions/login/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>User</code>&gt;</p> <p>A promise that resolves once the user is logged in. The resolved value is the logged-in user object.</p>"},{"location":"Frontend%20Development/api/auth/functions/login/#throws","title":"Throws","text":"<p>Error If the provided credentials are incorrect.</p>"},{"location":"Frontend%20Development/api/auth/functions/logout/","title":"Logout","text":"<p>@wuespace/telestion / auth / logout</p> <p>logout(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Logs out the user if currently logged in.</p>"},{"location":"Frontend%20Development/api/auth/functions/logout/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p> <p>A promise that resolves once the user is logged out.</p>"},{"location":"Frontend%20Development/api/auth/functions/setNatsConnection/","title":"setNatsConnection","text":"<p>@wuespace/telestion / auth / setNatsConnection</p> <p>setNatsConnection(<code>nc</code>): <code>void</code></p>"},{"location":"Frontend%20Development/api/auth/functions/setNatsConnection/#parameters","title":"Parameters","text":"<p>\u2022 nc: <code>null</code> | <code>NatsConnection</code></p>"},{"location":"Frontend%20Development/api/auth/functions/setNatsConnection/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/auth/functions/setUser/","title":"setUser","text":"<p>@wuespace/telestion / auth / setUser</p> <p>setUser(<code>user</code>): <code>void</code></p> <p>Sets a new user object or <code>null</code> if the user is no longer logged in.</p>"},{"location":"Frontend%20Development/api/auth/functions/setUser/#parameters","title":"Parameters","text":"<p>\u2022 user: <code>null</code> | <code>User</code></p> <p>the user object or <code>null</code></p>"},{"location":"Frontend%20Development/api/auth/functions/setUser/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/auth/functions/useNatsSubscription/","title":"useNatsSubscription","text":"<p>@wuespace/telestion / auth / useNatsSubscription</p> <p>useNatsSubscription(<code>subject</code>, <code>callback</code>, <code>options</code>?): <code>void</code></p>"},{"location":"Frontend%20Development/api/auth/functions/useNatsSubscription/#parameters","title":"Parameters","text":"<p>\u2022 subject: <code>string</code></p> <p>\u2022 callback: (<code>message</code>) =&gt; <code>void</code> | <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>\u2022 options?: <code>SubscriptionOptions</code></p>"},{"location":"Frontend%20Development/api/auth/functions/useNatsSubscription/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/auth/interfaces/ErrorMessages/","title":"ErrorMessages","text":"<p>@wuespace/telestion / auth / ErrorMessages</p>"},{"location":"Frontend%20Development/api/auth/interfaces/ErrorMessages/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/auth/interfaces/ErrorMessages/#natsurlmessage","title":"natsUrlMessage?","text":"<p>natsUrlMessage?: <code>string</code></p>"},{"location":"Frontend%20Development/api/auth/interfaces/ErrorMessages/#passwordmessage","title":"passwordMessage?","text":"<p>passwordMessage?: <code>string</code></p>"},{"location":"Frontend%20Development/api/auth/interfaces/ErrorMessages/#usernamemessage","title":"usernameMessage?","text":"<p>usernameMessage?: <code>string</code></p>"},{"location":"Frontend%20Development/api/auth/interfaces/User/","title":"User","text":"<p>@wuespace/telestion / auth / User</p> <p>A logged-in user.</p>"},{"location":"Frontend%20Development/api/auth/interfaces/User/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/auth/interfaces/User/#natsurl","title":"natsUrl","text":"<p>natsUrl: <code>string</code></p> <p>The NATS URL that the user is connected to.</p>"},{"location":"Frontend%20Development/api/auth/interfaces/User/#username","title":"username","text":"<p>username: <code>string</code></p> <p>The user\u2019s username.</p>"},{"location":"Frontend%20Development/api/index/","title":"Index","text":"<p>@wuespace/telestion / index</p> <p>The Telestion Frontend Library.</p> <p>Import this library to use the Telestion Frontend:</p> <pre><code>import { initTelestion } from '@wuespace/telestion';\n</code></pre> <p>The most important function is initTelestion. It initializes the Telestion Frontend and renders the application.</p> <pre><code>initTelestion({\n  version: '1.0.0',\n  ...\n});\n</code></pre>"},{"location":"Frontend%20Development/api/index/#see","title":"See","text":"<p>initTelestion</p>"},{"location":"Frontend%20Development/api/index/#interfaces","title":"Interfaces","text":"<ul> <li>TelestionOptions</li> <li>Widget</li> </ul>"},{"location":"Frontend%20Development/api/index/#type-aliases","title":"Type Aliases","text":"<ul> <li>UserData</li> </ul>"},{"location":"Frontend%20Development/api/index/#functions","title":"Functions","text":"<ul> <li>JSONCodec</li> <li>registerWidgets</li> <li>useNats</li> <li>useWidgetConfig</li> </ul>"},{"location":"Frontend%20Development/api/index/#references","title":"References","text":""},{"location":"Frontend%20Development/api/index/#inittelestion","title":"initTelestion","text":"<p>Re-exports initTelestion</p>"},{"location":"Frontend%20Development/api/index/functions/JSONCodec/","title":"JSONCodec","text":"<p>@wuespace/telestion / index / JSONCodec</p> <p>JSONCodec&lt;<code>T</code>&gt;(<code>reviver</code>?): <code>Codec</code>&lt;<code>T</code>&gt;</p> <p>Returns a Codec  for encoding JavaScript object to JSON and serialize them to an Uint8Array, and conversely, from an Uint8Array to JSON to a JavaScript Object.</p>"},{"location":"Frontend%20Development/api/index/functions/JSONCodec/#type-parameters","title":"Type parameters","text":"<p>\u2022 T = <code>unknown</code></p>"},{"location":"Frontend%20Development/api/index/functions/JSONCodec/#parameters","title":"Parameters","text":"<p>\u2022 reviver?: (<code>this</code>, <code>key</code>, <code>value</code>) =&gt; <code>unknown</code></p>"},{"location":"Frontend%20Development/api/index/functions/JSONCodec/#returns","title":"Returns","text":"<p><code>Codec</code>&lt;<code>T</code>&gt;</p>"},{"location":"Frontend%20Development/api/index/functions/registerWidgets/","title":"registerWidgets","text":"<p>@wuespace/telestion / index / registerWidgets</p> <p>registerWidgets(\u2026<code>widgets</code>): <code>void</code></p> <p>Registers widgets in the widget store.</p> <p>If a widget with the same ID already exists in the widget store, a warning is logged and the widget is ignored.</p>"},{"location":"Frontend%20Development/api/index/functions/registerWidgets/#parameters","title":"Parameters","text":"<p>\u2022 \u2026widgets: <code>Widget</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;&gt;[]</p> <p>The widgets to be registered.</p>"},{"location":"Frontend%20Development/api/index/functions/registerWidgets/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/index/functions/useNats/","title":"useNats","text":"<p>@wuespace/telestion / index / useNats</p> <p>useNats(): <code>NatsConnection</code></p>"},{"location":"Frontend%20Development/api/index/functions/useNats/#returns","title":"Returns","text":"<p><code>NatsConnection</code></p>"},{"location":"Frontend%20Development/api/index/functions/useWidgetConfig/","title":"useWidgetConfig","text":"<p>@wuespace/telestion / index / useWidgetConfig</p> <p>useWidgetConfig&lt;<code>T</code>&gt;(): <code>T</code></p> <p>Retrieves the widget configuration from the widgetConfigContext.</p>"},{"location":"Frontend%20Development/api/index/functions/useWidgetConfig/#type-parameters","title":"Type parameters","text":"<p>\u2022 T</p> <p>The type of the widget configuration.</p>"},{"location":"Frontend%20Development/api/index/functions/useWidgetConfig/#returns","title":"Returns","text":"<p><code>T</code></p> <p>The widget configuration retrieved from the widgetConfigContext.</p>"},{"location":"Frontend%20Development/api/index/functions/useWidgetConfig/#throws","title":"Throws","text":"<p>Error Throws an error if useWidgetConfig is not used within a WidgetConfigProvider.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/","title":"TelestionOptions","text":"<p>@wuespace/telestion / index / TelestionOptions</p> <p>Represents the options for Telestion.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#defaultbackendurl","title":"defaultBackendUrl?","text":"<p>defaultBackendUrl?: <code>string</code></p> <p>The backend URL that should be inserted by default on first page load.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#defaultuserdata","title":"defaultUserData?","text":"<p>defaultUserData?: <code>Object</code></p> <p>Represents the default user data.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#type-declaration","title":"Type declaration","text":""},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#dashboards","title":"dashboards","text":"<p>dashboards: <code>Record</code>&lt;<code>string</code>, { title: string; layout: string[][]; }&gt;</p> <p>The user\u2019s dashboards.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#version","title":"version","text":"<p>version: <code>string</code></p> <p>The version of the client that created this user data.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#widgetinstances","title":"widgetInstances","text":"<p>widgetInstances: <code>Record</code>&lt;<code>string</code>, { type: string; configuration: Record&lt;string, unknown&gt;; }&gt;</p> <p>The user\u2019s widget instances.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#version_1","title":"version","text":"<p>version: <code>string</code></p> <p>Represents the current version of the software.</p>"},{"location":"Frontend%20Development/api/index/interfaces/TelestionOptions/#widgets","title":"widgets?","text":"<p>widgets?: <code>Widget</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;&gt;[]</p> <p>Represents an array of widgets.</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/","title":"Widget","text":"<p>@wuespace/telestion / index / Widget</p> <p>A widget that can be used in widget instances on dashboards.</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#see","title":"See","text":"<p>userData.WidgetInstance</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#type-parameters","title":"Type parameters","text":"<p>\u2022 T extends <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p> <p>the type of the widget configuration</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/index/interfaces/Widget/#configelement","title":"configElement","text":"<p>configElement: <code>ReactNode</code></p> <p>A configuration element that is used to configure the widget.</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#element","title":"element","text":"<p>element: <code>ReactNode</code></p> <p>A function that takes the configuration of the widget and returns a React element that represents the widget.</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Represents an identifier of the widget type.</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#label","title":"label","text":"<p>label: <code>string</code></p> <p>Represents a human-readable label of the widget type.</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/index/interfaces/Widget/#createconfig","title":"createConfig()","text":"<p>createConfig(<code>input</code>): <code>T</code></p> <p>A function that takes an object that contains the previous widget configuration (which may or may not be from a previous version of the client (or could also, when creating new widget instances, be empty) and returns a valid configuration for the widget.</p> <p>For widgets with expected breaking changes, it is therefore useful to have some version identifier be a part of the configuration options to enable more complex migration logic in this function.</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#parameters","title":"Parameters","text":"<p>\u2022 input: <code>Partial</code>&lt;<code>T</code>&gt; &amp; <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p> <p>previous configuration or empty</p>"},{"location":"Frontend%20Development/api/index/interfaces/Widget/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"Frontend%20Development/api/index/type-aliases/UserData/","title":"UserData","text":"<p>@wuespace/telestion / index / UserData</p> <p>UserData: <code>Object</code></p> <p>Represents the user data.</p>"},{"location":"Frontend%20Development/api/index/type-aliases/UserData/#see","title":"See","text":"<p>userDataSchema</p>"},{"location":"Frontend%20Development/api/index/type-aliases/UserData/#type-declaration","title":"Type declaration","text":""},{"location":"Frontend%20Development/api/index/type-aliases/UserData/#dashboards","title":"dashboards","text":"<p>dashboards: <code>Record</code>&lt;<code>string</code>, { title: string; layout: string[][]; }&gt;</p> <p>The user\u2019s dashboards.</p>"},{"location":"Frontend%20Development/api/index/type-aliases/UserData/#version","title":"version","text":"<p>version: <code>string</code></p> <p>The version of the client that created this user data.</p>"},{"location":"Frontend%20Development/api/index/type-aliases/UserData/#widgetinstances","title":"widgetInstances","text":"<p>widgetInstances: <code>Record</code>&lt;<code>string</code>, { type: string; configuration: Record&lt;string, unknown&gt;; }&gt;</p> <p>The user\u2019s widget instances.</p>"},{"location":"Frontend%20Development/api/nats/","title":"Index","text":"<p>@wuespace/telestion / nats</p> <p>Re-exporting the most used types and functions from the <code>nats.ws</code> package.</p>"},{"location":"Frontend%20Development/api/nats/#example","title":"Example","text":"<pre><code>import { Msg, JSONCodec, ... } from '@wuespace/telestion/nats';\n</code></pre>"},{"location":"Frontend%20Development/api/nats/#see","title":"See","text":"<ul> <li>https://docs.nats.io/using-nats/developer</li> <li>https://github.com/nats-io/nats.ws#readme</li> </ul>"},{"location":"Frontend%20Development/api/nats/#classes","title":"Classes","text":"<ul> <li>NatsError</li> </ul>"},{"location":"Frontend%20Development/api/nats/#interfaces","title":"Interfaces","text":"<ul> <li>Codec</li> <li>Msg</li> <li>MsgHdrs</li> <li>NatsConnection</li> <li>PublishOptions</li> <li>RequestOptions</li> <li>Sub</li> <li>SubOpts</li> </ul>"},{"location":"Frontend%20Development/api/nats/#type-aliases","title":"Type Aliases","text":"<ul> <li>MsgRequest</li> <li>Subscription</li> <li>SubscriptionOptions</li> </ul>"},{"location":"Frontend%20Development/api/nats/#functions","title":"Functions","text":"<ul> <li>StringCodec</li> <li>headers</li> </ul>"},{"location":"Frontend%20Development/api/nats/#references","title":"References","text":""},{"location":"Frontend%20Development/api/nats/#jsoncodec","title":"JSONCodec","text":"<p>Re-exports JSONCodec</p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/","title":"NatsError","text":"<p>@wuespace/telestion / nats / NatsError</p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#extends","title":"Extends","text":"<ul> <li><code>Error</code></li> </ul>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#constructors","title":"Constructors","text":""},{"location":"Frontend%20Development/api/nats/classes/NatsError/#new-natserrormessage-code-chainederror","title":"new NatsError(message, code, chainedError)","text":"<p>new NatsError(<code>message</code>, <code>code</code>, <code>chainedError</code>?): <code>NatsError</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#parameters","title":"Parameters","text":"<p>\u2022 message: <code>string</code></p> <p>\u2022 code: <code>string</code></p> <p>\u2022 chainedError?: <code>Error</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns","title":"Returns","text":"<p><code>NatsError</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#overrides","title":"Overrides","text":"<p><code>Error.constructor</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#api","title":"Api","text":"<p>private</p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/classes/NatsError/#api_error","title":"api_error?","text":"<p>api_error?: <code>ApiError</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#chainederror","title":"chainedError?","text":"<p>chainedError?: <code>Error</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#code","title":"code","text":"<p>code: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#message","title":"message","text":"<p>message: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#overrides_1","title":"Overrides","text":"<p><code>Error.message</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#name","title":"name","text":"<p>name: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#overrides_2","title":"Overrides","text":"<p><code>Error.name</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#permissioncontext","title":"permissionContext?","text":"<p>permissionContext?: <code>Object</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#type-declaration","title":"Type declaration","text":""},{"location":"Frontend%20Development/api/nats/classes/NatsError/#operation","title":"operation","text":"<p>operation: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#subject","title":"subject","text":"<p>subject: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#stack","title":"stack?","text":"<p>stack?: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#inherited-from","title":"Inherited from","text":"<p><code>Error.stack</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#preparestacktrace","title":"prepareStackTrace?","text":"<p><code>static</code> prepareStackTrace?: (<code>err</code>, <code>stackTraces</code>) =&gt; <code>any</code></p> <p>Optional override for formatting stack traces</p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#parameters_1","title":"Parameters","text":"<p>\u2022 err: <code>Error</code></p> <p>\u2022 stackTraces: <code>CallSite</code>[]</p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_1","title":"Returns","text":"<p><code>any</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#see","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#inherited-from_1","title":"Inherited from","text":"<p><code>Error.prepareStackTrace</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#stacktracelimit","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#inherited-from_2","title":"Inherited from","text":"<p><code>Error.stackTraceLimit</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/nats/classes/NatsError/#isautherror","title":"isAuthError()","text":"<p>isAuthError(): <code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#isauthtimeout","title":"isAuthTimeout()","text":"<p>isAuthTimeout(): <code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_3","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#isjetstreamerror","title":"isJetStreamError()","text":"<p>isJetStreamError(): <code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#ispermissionerror","title":"isPermissionError()","text":"<p>isPermissionError(): <code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_5","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#isprotocolerror","title":"isProtocolError()","text":"<p>isProtocolError(): <code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_6","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#jserror","title":"jsError()","text":"<p>jsError(): <code>null</code> | <code>ApiError</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_7","title":"Returns","text":"<p><code>null</code> | <code>ApiError</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#capturestacktrace","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt</code>?): <code>void</code></p> <p>Create .stack property on a target object</p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#parameters_2","title":"Parameters","text":"<p>\u2022 targetObject: <code>object</code></p> <p>\u2022 constructorOpt?: <code>Function</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#inherited-from_3","title":"Inherited from","text":"<p><code>Error.captureStackTrace</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#errorforcode","title":"errorForCode()","text":"<p><code>static</code> errorForCode(<code>code</code>, <code>chainedError</code>?): <code>NatsError</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#parameters_3","title":"Parameters","text":"<p>\u2022 code: <code>string</code></p> <p>\u2022 chainedError?: <code>Error</code></p>"},{"location":"Frontend%20Development/api/nats/classes/NatsError/#returns_9","title":"Returns","text":"<p><code>NatsError</code></p>"},{"location":"Frontend%20Development/api/nats/functions/StringCodec/","title":"StringCodec","text":"<p>@wuespace/telestion / nats / StringCodec</p> <p>StringCodec(): <code>Codec</code>&lt;<code>string</code>&gt;</p> <p>Returns a Codec for encoding strings to a message payload and decoding message payloads into strings.</p>"},{"location":"Frontend%20Development/api/nats/functions/StringCodec/#returns","title":"Returns","text":"<p><code>Codec</code>&lt;<code>string</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/functions/headers/","title":"Headers","text":"<p>@wuespace/telestion / nats / headers</p> <p>headers(<code>code</code>?, <code>description</code>?): <code>MsgHdrs</code></p>"},{"location":"Frontend%20Development/api/nats/functions/headers/#parameters","title":"Parameters","text":"<p>\u2022 code?: <code>number</code></p> <p>\u2022 description?: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/functions/headers/#returns","title":"Returns","text":"<p><code>MsgHdrs</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/","title":"Codec","text":"<p>@wuespace/telestion / nats / Codec</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#type-parameters","title":"Type parameters","text":"<p>\u2022 T</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#decode","title":"decode()","text":"<p>decode(<code>a</code>): <code>T</code></p> <p>Decode an Uint8Array from a message payload into a T</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#parameters","title":"Parameters","text":"<p>\u2022 a: <code>Uint8Array</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#encode","title":"encode()","text":"<p>encode(<code>d</code>): <code>Uint8Array</code></p> <p>Encode T to an Uint8Array suitable for including in a message payload.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#parameters_1","title":"Parameters","text":"<p>\u2022 d: <code>T</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Codec/#returns_1","title":"Returns","text":"<p><code>Uint8Array</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/","title":"Msg","text":"<p>@wuespace/telestion / nats / Msg</p> <p>Represents a message delivered by NATS. This interface is used by Subscribers.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#data","title":"data","text":"<p>data: <code>Uint8Array</code></p> <p>The message\u2019s data (or payload)</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#headers","title":"headers?","text":"<p>headers?: <code>MsgHdrs</code></p> <p>Possible headers that may have been set by the server or the publisher.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#reply","title":"reply?","text":"<p>reply?: <code>string</code></p> <p>A possible subject where the recipient may publish a reply (in the cases where the message represents a request).</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#sid","title":"sid","text":"<p>sid: <code>number</code></p> <p>The subscription ID where the message was dispatched.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#subject","title":"subject","text":"<p>subject: <code>string</code></p> <p>The subject the message was sent to</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#json","title":"json()","text":"<p>json&lt;<code>T</code>&gt;(<code>reviver</code>?): <code>T</code></p> <p>Convenience method to parse the message payload as JSON. This method will throw an exception if there\u2019s a parsing error;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#type-parameters","title":"Type parameters","text":"<p>\u2022 T</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#parameters","title":"Parameters","text":"<p>\u2022 reviver?: <code>ReviverFn</code></p> <p>a reviver function</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#respond","title":"respond()","text":"<p>respond(<code>payload</code>?, <code>opts</code>?): <code>boolean</code></p> <p>Convenience to publish a response to the reply subject in the message - this is the same as doing <code>nc.publish(msg.reply, ...)</code>.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#parameters_1","title":"Parameters","text":"<p>\u2022 payload?: <code>Payload</code></p> <p>\u2022 opts?: <code>PublishOptions</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#string","title":"string()","text":"<p>string(): <code>string</code></p> <p>Convenience method to parse the message payload as string. This method may throw an exception if there\u2019s a conversion error</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Msg/#returns_2","title":"Returns","text":"<p><code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/","title":"MsgHdrs","text":"<p>@wuespace/telestion / nats / MsgHdrs</p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#extends","title":"Extends","text":"<ul> <li><code>Iterable</code>&lt;[<code>string</code>, <code>string</code>[]]&gt;</li> </ul>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#code","title":"code","text":"<p>code: <code>number</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#description","title":"description","text":"<p>description: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#haserror","title":"hasError","text":"<p>hasError: <code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#status","title":"status","text":"<p>status: <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#iterator","title":"<code>[iterator]</code>()","text":"<p>[iterator](): <code>Iterator</code>&lt;[<code>string</code>, <code>string</code>[]], <code>any</code>, <code>undefined</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns","title":"Returns","text":"<p><code>Iterator</code>&lt;[<code>string</code>, <code>string</code>[]], <code>any</code>, <code>undefined</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#inherited-from","title":"Inherited from","text":"<p><code>Iterable.[iterator]</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#append","title":"append()","text":"<p>append(<code>k</code>, <code>v</code>, <code>match</code>?): <code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#parameters","title":"Parameters","text":"<p>\u2022 k: <code>string</code></p> <p>\u2022 v: <code>string</code></p> <p>\u2022 match?: <code>Match</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#delete","title":"delete()","text":"<p>delete(<code>k</code>, <code>match</code>?): <code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#parameters_1","title":"Parameters","text":"<p>\u2022 k: <code>string</code></p> <p>\u2022 match?: <code>Match</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#get","title":"get()","text":"<p>get(<code>k</code>, <code>match</code>?): <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#parameters_2","title":"Parameters","text":"<p>\u2022 k: <code>string</code></p> <p>\u2022 match?: <code>Match</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_3","title":"Returns","text":"<p><code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#has","title":"has()","text":"<p>has(<code>k</code>, <code>match</code>?): <code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#parameters_3","title":"Parameters","text":"<p>\u2022 k: <code>string</code></p> <p>\u2022 match?: <code>Match</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#keys","title":"keys()","text":"<p>keys(): <code>string</code>[]</p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_5","title":"Returns","text":"<p><code>string</code>[]</p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#last","title":"last()","text":"<p>last(<code>k</code>, <code>match</code>?): <code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#parameters_4","title":"Parameters","text":"<p>\u2022 k: <code>string</code></p> <p>\u2022 match?: <code>Match</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_6","title":"Returns","text":"<p><code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#set","title":"set()","text":"<p>set(<code>k</code>, <code>v</code>, <code>match</code>?): <code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#parameters_5","title":"Parameters","text":"<p>\u2022 k: <code>string</code></p> <p>\u2022 v: <code>string</code></p> <p>\u2022 match?: <code>Match</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#values","title":"values()","text":"<p>values(<code>k</code>, <code>match</code>?): <code>string</code>[]</p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#parameters_6","title":"Parameters","text":"<p>\u2022 k: <code>string</code></p> <p>\u2022 match?: <code>Match</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/MsgHdrs/#returns_8","title":"Returns","text":"<p><code>string</code>[]</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/","title":"NatsConnection","text":"<p>@wuespace/telestion / nats / NatsConnection</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#info","title":"info?","text":"<p>info?: <code>ServerInfo</code></p> <p>ServerInfo to the currently connected server or undefined</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#services","title":"services","text":"<p>services: <code>ServicesAPI</code></p> <p>Returns a ServicesAPI which allows you to build services using NATS.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#close","title":"close()","text":"<p>close(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Close will close the connection to the server. This call will terminate all pending requests and subscriptions. The returned promise resolves when the connection closes.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#closed","title":"closed()","text":"<p>closed(): <code>Promise</code>&lt;<code>void</code> | <code>Error</code>&gt;</p> <p>Returns a promise that can be used to monitor if the client closes. The promise can resolve an Error if the reason for the close was an error. Note that the promise doesn\u2019t reject, but rather resolves to the error if there was one.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code> | <code>Error</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#drain","title":"drain()","text":"<p>drain(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Initiates a drain on the connection and returns a promise that resolves when the drain completes and the connection closes.</p> <p>Drain is an ordered shutdown of the client. Instead of abruptly closing the client, subscriptions are drained, that is messages not yet processed by a subscription are handled before the subscription is closed. After subscriptions are drained it is not possible to create a new subscription. Then all pending outbound messages are sent to the server. Finally, the connection is closed.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#flush","title":"flush()","text":"<p>flush(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Returns a Promise that resolves when the client receives a reply from the server. Use of this API is not necessary by clients.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#getserver","title":"getServer()","text":"<p>getServer(): <code>string</code></p> <p>Returns the hostport of the server the client is connected to.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_4","title":"Returns","text":"<p><code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#isclosed","title":"isClosed()","text":"<p>isClosed(): <code>boolean</code></p> <p>Returns true if the client is closed.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_5","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#isdraining","title":"isDraining()","text":"<p>isDraining(): <code>boolean</code></p> <p>Returns true if the client is draining.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_6","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#jetstream","title":"jetstream()","text":"<p>jetstream(<code>opts</code>?): <code>JetStreamClient</code></p> <p>Returns a JetStreamClient which allows publishing messages to JetStream or consuming messages from streams.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#parameters","title":"Parameters","text":"<p>\u2022 opts?: <code>JetStreamOptions</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_7","title":"Returns","text":"<p><code>JetStreamClient</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#jetstreammanager","title":"jetstreamManager()","text":"<p>jetstreamManager(<code>opts</code>?): <code>Promise</code>&lt;<code>JetStreamManager</code>&gt;</p> <p>Returns a Promise to a JetStreamManager which allows the client to access Streams and Consumers information.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#parameters_1","title":"Parameters","text":"<p>\u2022 opts?: <code>JetStreamManagerOptions</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_8","title":"Returns","text":"<p><code>Promise</code>&lt;<code>JetStreamManager</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#publish","title":"publish()","text":"<p>publish(<code>subject</code>, <code>payload</code>?, <code>options</code>?): <code>void</code></p> <p>Publishes the specified data to the specified subject.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#parameters_2","title":"Parameters","text":"<p>\u2022 subject: <code>string</code></p> <p>\u2022 payload?: <code>Payload</code></p> <p>\u2022 options?: <code>PublishOptions</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#reconnect","title":"reconnect()","text":"<p>reconnect(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Use of this API is experimental, and it is subject to be removed.</p> <p>reconnect() enables a client to force a reconnect. A reconnect will disconnect the client, and possibly initiate a reconnect to the cluster.  Note that all reconnect caveats apply:</p> <ul> <li> <p>If the reconnection policy given to the client doesn\u2019t allow reconnects, the connection will close.</p> </li> <li> <p>Messages that are inbound or outbound could  be lost.</p> </li> <li> <p>All requests that are in flight will be rejected.</p> </li> </ul> <p>Note that the returned promise will reject if the client is already closed, or if it is in the process of draining. If the client is currently disconnected, this API has no effect, as the client is already attempting to reconnect.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#request","title":"request()","text":"<p>request(<code>subject</code>, <code>payload</code>?, <code>opts</code>?): <code>Promise</code>&lt;<code>Msg</code>&gt;</p> <p>Publishes a request with specified data in the specified subject expecting a response before RequestOptions#timeout milliseconds. The api returns a Promise that resolves when the first response to the request is received. If there are no responders (a subscription) listening on the request subject, the request will fail as soon as the server processes it.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#parameters_3","title":"Parameters","text":"<p>\u2022 subject: <code>string</code></p> <p>\u2022 payload?: <code>Payload</code></p> <p>\u2022 opts?: <code>RequestOptions</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_11","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Msg</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#requestmany","title":"requestMany()","text":"<p>requestMany(<code>subject</code>, <code>payload</code>?, <code>opts</code>?): <code>Promise</code>&lt;<code>AsyncIterable</code>&lt;<code>Msg</code>&gt;&gt;</p> <p>Publishes a request expecting multiple responses back. Several strategies to determine when the request should stop gathering responses.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#parameters_4","title":"Parameters","text":"<p>\u2022 subject: <code>string</code></p> <p>\u2022 payload?: <code>Payload</code></p> <p>\u2022 opts?: <code>Partial</code>&lt;<code>RequestManyOptions</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_12","title":"Returns","text":"<p><code>Promise</code>&lt;<code>AsyncIterable</code>&lt;<code>Msg</code>&gt;&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#rtt","title":"rtt()","text":"<p>rtt(): <code>Promise</code>&lt;<code>number</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_13","title":"Returns","text":"<p><code>Promise</code>&lt;<code>number</code>&gt;</p> <p>the number of milliseconds it took for a flush.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#stats","title":"stats()","text":"<p>stats(): <code>Stats</code></p> <p>Returns some metrics such as the number of messages and bytes sent and recieved by the client.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_14","title":"Returns","text":"<p><code>Stats</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#status","title":"status()","text":"<p>status(): <code>AsyncIterable</code>&lt;<code>Status</code>&gt;</p> <p>Returns an async iterator of Status that may be useful in understanding when the client looses a connection, or reconnects, or receives an update from the cluster among other things.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_15","title":"Returns","text":"<p><code>AsyncIterable</code>&lt;<code>Status</code>&gt;</p> <p>an AsyncIterable"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#subscribe","title":"subscribe()","text":"<p>subscribe(<code>subject</code>, <code>opts</code>?): <code>Subscription</code></p> <p>Subscribe expresses interest in the specified subject. The subject may have wildcards. Messages are delivered to the SubscriptionOptions callback if specified. Otherwise, the subscription is an async iterator for Msg.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#parameters_5","title":"Parameters","text":"<p>\u2022 subject: <code>string</code></p> <p>\u2022 opts?: <code>SubscriptionOptions</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/NatsConnection/#returns_16","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/PublishOptions/","title":"PublishOptions","text":"<p>@wuespace/telestion / nats / PublishOptions</p>"},{"location":"Frontend%20Development/api/nats/interfaces/PublishOptions/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/interfaces/PublishOptions/#headers","title":"headers?","text":"<p>headers?: <code>MsgHdrs</code></p> <p>Optional headers to include with the message.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/PublishOptions/#reply","title":"reply?","text":"<p>reply?: <code>string</code></p> <p>An optional subject where a response should be sent. Note you must have a subscription listening on this subject to receive the response.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/RequestOptions/","title":"RequestOptions","text":"<p>@wuespace/telestion / nats / RequestOptions</p>"},{"location":"Frontend%20Development/api/nats/interfaces/RequestOptions/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/interfaces/RequestOptions/#headers","title":"headers?","text":"<p>headers?: <code>MsgHdrs</code></p> <p>MsgHdrs to include with the request.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/RequestOptions/#nomux","title":"noMux?","text":"<p>noMux?: <code>boolean</code></p> <p>If true, the request API will create a regular NATS subscription to process the response. Otherwise a shared muxed subscriptions is used. Requires reply</p>"},{"location":"Frontend%20Development/api/nats/interfaces/RequestOptions/#reply","title":"reply?","text":"<p>reply?: <code>string</code></p> <p>The subject where the response should be sent to. Requires noMux</p>"},{"location":"Frontend%20Development/api/nats/interfaces/RequestOptions/#timeout","title":"timeout","text":"<p>timeout: <code>number</code></p> <p>number of milliseconds before the request will timeout.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/","title":"Sub","text":"<p>@wuespace/telestion / nats / Sub</p> <p>Basic interface to a Subscription type</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#extends","title":"Extends","text":"<ul> <li><code>AsyncIterable</code>&lt;<code>T</code>&gt;</li> </ul>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#type-parameters","title":"Type parameters","text":"<p>\u2022 T</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#closed","title":"closed","text":"<p>closed: <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>A promise that resolves when the subscription closes</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#methods","title":"Methods","text":""},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#asynciterator","title":"<code>[asyncIterator]</code>()","text":"<p>[asyncIterator](): <code>AsyncIterator</code>&lt;<code>T</code>, <code>any</code>, <code>undefined</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns","title":"Returns","text":"<p><code>AsyncIterator</code>&lt;<code>T</code>, <code>any</code>, <code>undefined</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#inherited-from","title":"Inherited from","text":"<p><code>AsyncIterable.[asyncIterator]</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#drain","title":"drain()","text":"<p>drain(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Drain the subscription, closing it after processing all messages currently in flight for the client. Returns a promise that resolves when the subscription finished draining.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#getmax","title":"getMax()","text":"<p>getMax(): <code>undefined</code> | <code>number</code></p> <p>Return the max number of messages before the subscription will unsubscribe.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_2","title":"Returns","text":"<p><code>undefined</code> | <code>number</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#getpending","title":"getPending()","text":"<p>getPending(): <code>number</code></p> <p>Returns the number of messages that are pending processing. Note that this is method is only valid for iterators.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_3","title":"Returns","text":"<p><code>number</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#getprocessed","title":"getProcessed()","text":"<p>getProcessed(): <code>number</code></p> <p>Returns the number of messages that have been processed by the subscription.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_4","title":"Returns","text":"<p><code>number</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#getreceived","title":"getReceived()","text":"<p>getReceived(): <code>number</code></p> <p>Returns the number of messages received by the subscription.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_5","title":"Returns","text":"<p><code>number</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#getsubject","title":"getSubject()","text":"<p>getSubject(): <code>string</code></p> <p>Returns the subject that was used to create the subscription.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_6","title":"Returns","text":"<p><code>string</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#isclosed","title":"isClosed()","text":"<p>isClosed(): <code>boolean</code></p> <p>Returns true if the subscription is closed.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_7","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#isdraining","title":"isDraining()","text":"<p>isDraining(): <code>boolean</code></p> <p>Returns true if the subscription is draining.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_8","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#unsubscribe","title":"unsubscribe()","text":"<p>unsubscribe(<code>max</code>?): <code>void</code></p> <p>Stop the subscription from receiving messages. You can optionally specify that the subscription should stop after the specified number of messages have been received. Note this count is since the lifetime of the subscription.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#parameters","title":"Parameters","text":"<p>\u2022 max?: <code>number</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/Sub/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/","title":"SubOpts","text":"<p>@wuespace/telestion / nats / SubOpts</p> <p>Subscription Options</p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#type-parameters","title":"Type parameters","text":"<p>\u2022 T</p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#callback","title":"callback?","text":"<p>callback?: (<code>err</code>, <code>msg</code>) =&gt; <code>void</code></p> <p>An optional function that will handle messages. Typically, messages are processed via an async iterator on the subscription. If this option is provided, messages are processed by the specified function.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#parameters","title":"Parameters","text":"<p>\u2022 err: <code>null</code> | <code>NatsError</code></p> <p>\u2022 msg: <code>T</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#max","title":"max?","text":"<p>max?: <code>number</code></p> <p>Optional maximum number of messages to deliver to the subscription before it is auto-unsubscribed.</p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#queue","title":"queue?","text":"<p>queue?: <code>string</code></p> <p>Optional queue name (subscriptions on the same subject that use queues are horizontally load balanced when part of the same queue).</p>"},{"location":"Frontend%20Development/api/nats/interfaces/SubOpts/#timeout","title":"timeout?","text":"<p>timeout?: <code>number</code></p> <p>Optional maximum number of milliseconds before a timer raises an error. This useful to monitor a subscription that is expected to yield messages. The timer is cancelled when the first message is received by the subscription.</p>"},{"location":"Frontend%20Development/api/nats/type-aliases/MsgRequest/","title":"MsgRequest","text":"<p>@wuespace/telestion / nats / MsgRequest</p> <p>MsgRequest: <code>SeqMsgRequest</code> | <code>LastForMsgRequest</code> | <code>number</code></p>"},{"location":"Frontend%20Development/api/nats/type-aliases/Subscription/","title":"Subscription","text":"<p>@wuespace/telestion / nats / Subscription</p> <p>Subscription: <code>Sub</code>&lt;<code>Msg</code>&gt;</p> <p>Type alias for NATS core subscriptions</p>"},{"location":"Frontend%20Development/api/nats/type-aliases/SubscriptionOptions/","title":"SubscriptionOptions","text":"<p>@wuespace/telestion / nats / SubscriptionOptions</p> <p>SubscriptionOptions: <code>SubOpts</code>&lt;<code>Msg</code>&gt;</p> <p>Subscription Options</p>"},{"location":"Frontend%20Development/api/user-data/","title":"Index","text":"<p>@wuespace/telestion / user-data</p> <p>Types and utilities for interacting with the user data stored on the user\u2019s device.</p>"},{"location":"Frontend%20Development/api/user-data/#example","title":"Example","text":"<pre><code>import { ... } from '@wuespace/telestion/user-data';\n</code></pre>"},{"location":"Frontend%20Development/api/user-data/#type-aliases","title":"Type Aliases","text":"<ul> <li>Dashboard</li> <li>WidgetInstance</li> </ul>"},{"location":"Frontend%20Development/api/user-data/#variables","title":"Variables","text":"<ul> <li>dashboardSchema</li> <li>idSchema</li> <li>layoutSchema</li> <li>semverRegExp</li> <li>userDataSchema</li> <li>widgetInstanceSchema</li> </ul>"},{"location":"Frontend%20Development/api/user-data/#functions","title":"Functions","text":"<ul> <li>getBlankUserData</li> <li>getEmptyDashboard</li> <li>getUserData</li> <li>removeUserData</li> <li>setUserData</li> </ul>"},{"location":"Frontend%20Development/api/user-data/#references","title":"References","text":""},{"location":"Frontend%20Development/api/user-data/#userdata","title":"UserData","text":"<p>Re-exports UserData</p>"},{"location":"Frontend%20Development/api/user-data/functions/getBlankUserData/","title":"getBlankUserData","text":"<p>@wuespace/telestion / user-data / getBlankUserData</p> <p>getBlankUserData(<code>version</code>): <code>UserData</code></p> <p>Returns a new blank user data object.</p>"},{"location":"Frontend%20Development/api/user-data/functions/getBlankUserData/#parameters","title":"Parameters","text":"<p>\u2022 version: <code>string</code></p> <p>the current application version</p>"},{"location":"Frontend%20Development/api/user-data/functions/getBlankUserData/#returns","title":"Returns","text":"<p><code>UserData</code></p>"},{"location":"Frontend%20Development/api/user-data/functions/getEmptyDashboard/","title":"getEmptyDashboard","text":"<p>@wuespace/telestion / user-data / getEmptyDashboard</p> <p>getEmptyDashboard(): readonly [<code>string</code>, <code>Dashboard</code>]</p> <p>Returns a new and empty dashboard with a unique id.</p>"},{"location":"Frontend%20Development/api/user-data/functions/getEmptyDashboard/#returns","title":"Returns","text":"<p>readonly [<code>string</code>, <code>Dashboard</code>]</p>"},{"location":"Frontend%20Development/api/user-data/functions/getUserData/","title":"getUserData","text":"<p>@wuespace/telestion / user-data / getUserData</p> <p>getUserData(): <code>undefined</code> | <code>Object</code></p> <p>Retrieves user data from local storage.</p>"},{"location":"Frontend%20Development/api/user-data/functions/getUserData/#returns","title":"Returns","text":"<p><code>undefined</code> | <code>Object</code></p> <p>The user data if found in local storage, otherwise undefined.</p>"},{"location":"Frontend%20Development/api/user-data/functions/removeUserData/","title":"removeUserData","text":"<p>@wuespace/telestion / user-data / removeUserData</p> <p>removeUserData(): <code>void</code></p> <p>Removes the user data from local storage.</p>"},{"location":"Frontend%20Development/api/user-data/functions/removeUserData/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/user-data/functions/setUserData/","title":"setUserData","text":"<p>@wuespace/telestion / user-data / setUserData</p> <p>setUserData(<code>newUserData</code>): <code>void</code></p> <p>Sets the user data in the local storage based on the given input.</p>"},{"location":"Frontend%20Development/api/user-data/functions/setUserData/#parameters","title":"Parameters","text":"<p>\u2022 newUserData: <code>Object</code></p> <p>The new user data to be set.</p> <p>\u2022 newUserData.dashboards: <code>Record</code>&lt;<code>string</code>, { title: string; layout: string[][]; }&gt;= <code>undefined</code></p> <p>The user\u2019s dashboards.</p> <p>\u2022 newUserData.version: <code>string</code>= <code>undefined</code></p> <p>The version of the client that created this user data.</p> <p>\u2022 newUserData.widgetInstances: <code>Record</code>&lt;<code>string</code>, { type: string; configuration: Record&lt;string, unknown&gt;; }&gt;= <code>undefined</code></p> <p>The user\u2019s widget instances.</p>"},{"location":"Frontend%20Development/api/user-data/functions/setUserData/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/Dashboard/","title":"Dashboard","text":"<p>@wuespace/telestion / user-data / Dashboard</p> <p>Dashboard: <code>Object</code></p> <p>Represents a dashboard.</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/Dashboard/#see","title":"See","text":"<p>dashboardSchema</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/Dashboard/#type-declaration","title":"Type declaration","text":""},{"location":"Frontend%20Development/api/user-data/type-aliases/Dashboard/#layout","title":"layout","text":"<p>layout: <code>string</code>[][] = <code>layoutSchema</code></p> <p>The layout of the dashboard.</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/Dashboard/#title","title":"title","text":"<p>title: <code>string</code></p> <p>The title of the dashboard.</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/WidgetInstance/","title":"WidgetInstance","text":"<p>@wuespace/telestion / user-data / WidgetInstance</p> <p>WidgetInstance: <code>Object</code></p> <p>Represents a widget instance.</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/WidgetInstance/#see","title":"See","text":"<p>widgetInstanceSchema</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/WidgetInstance/#type-declaration","title":"Type declaration","text":""},{"location":"Frontend%20Development/api/user-data/type-aliases/WidgetInstance/#configuration","title":"configuration","text":"<p>configuration: <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p> <p>The configuration of the widget.</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/WidgetInstance/#type","title":"type","text":"<p>type: <code>string</code></p> <p>The type ID of the widget.</p> <p>This is used to determine which widget type to use to render the widget.</p>"},{"location":"Frontend%20Development/api/user-data/type-aliases/WidgetInstance/#see_1","title":"See","text":"<p>Widget.id</p>"},{"location":"Frontend%20Development/api/user-data/variables/dashboardSchema/","title":"dashboardSchema","text":"<p>@wuespace/telestion / user-data / dashboardSchema</p> <p><code>const</code> dashboardSchema: <code>ZodObject</code>&lt;<code>Dashboard</code>&gt;</p> <p>Represents the schema for a dashboard.</p>"},{"location":"Frontend%20Development/api/user-data/variables/idSchema/","title":"idSchema","text":"<p>@wuespace/telestion / user-data / idSchema</p> <p><code>const</code> idSchema: <code>ZodString</code></p> <p>A regular expression that matches valid identifiers.</p> <p>Used for dashboard and widget instance IDs.</p>"},{"location":"Frontend%20Development/api/user-data/variables/idSchema/#see","title":"See","text":"<p>WidgetInstance</p>"},{"location":"Frontend%20Development/api/user-data/variables/layoutSchema/","title":"layoutSchema","text":"<p>@wuespace/telestion / user-data / layoutSchema</p> <p><code>const</code> layoutSchema: <code>ZodArray</code>&lt;<code>ZodArray</code>&lt;<code>ZodUnion</code>&lt;[<code>ZodString</code>, <code>ZodLiteral</code>&lt;<code>\".\"</code>&gt;]&gt;, <code>\"many\"</code>&gt;, <code>\"many\"</code>&gt;</p> <p>A schema that matches valid layout configurations.</p>"},{"location":"Frontend%20Development/api/user-data/variables/semverRegExp/","title":"semverRegExp","text":"<p>@wuespace/telestion / user-data / semverRegExp</p> <p><code>const</code> semverRegExp: <code>RegExp</code></p> <p>A regular expression that matches semantic version numbers.</p> <p>Taken from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string</p>"},{"location":"Frontend%20Development/api/user-data/variables/userDataSchema/","title":"userDataSchema","text":"<p>@wuespace/telestion / user-data / userDataSchema</p> <p><code>const</code> userDataSchema: <code>ZodObject</code>&lt;<code>UserData</code>&gt;</p> <p>The schema for the user data.</p>"},{"location":"Frontend%20Development/api/user-data/variables/userDataSchema/#see","title":"See","text":"<p>UserData</p>"},{"location":"Frontend%20Development/api/user-data/variables/widgetInstanceSchema/","title":"widgetInstanceSchema","text":"<p>@wuespace/telestion / user-data / widgetInstanceSchema</p> <p><code>const</code> widgetInstanceSchema: <code>ZodObject</code>&lt;<code>WidgetInstance</code>&gt;</p> <p>Represents the schema for a widget instance.</p>"},{"location":"Frontend%20Development/api/user-data/variables/widgetInstanceSchema/#see","title":"See","text":"<p>WidgetInstance</p>"},{"location":"Frontend%20Development/api/utils/","title":"Index","text":"<p>@wuespace/telestion / utils</p> <p>Various utility functions around building Telestion frontend apps.</p>"},{"location":"Frontend%20Development/api/utils/#example","title":"Example","text":"<pre><code>import { ... } from '@wuespace/telestion/utils';\n</code></pre>"},{"location":"Frontend%20Development/api/utils/#index","title":"Index","text":""},{"location":"Frontend%20Development/api/utils/#functions","title":"Functions","text":"<ul> <li>generateDashboardId</li> <li>isUserDataUpToDate</li> <li>loadFileContents</li> <li>wait</li> </ul>"},{"location":"Frontend%20Development/api/utils/functions/generateDashboardId/","title":"generateDashboardId","text":"<p>@wuespace/telestion / utils / generateDashboardId</p> <p>generateDashboardId(): <code>string</code></p> <p>Generates a unique identifier for a dashboard.</p>"},{"location":"Frontend%20Development/api/utils/functions/generateDashboardId/#returns","title":"Returns","text":"<p><code>string</code></p> <p>The generated dashboard identifier.</p>"},{"location":"Frontend%20Development/api/utils/functions/isUserDataUpToDate/","title":"isUserDataUpToDate","text":"<p>@wuespace/telestion / utils / isUserDataUpToDate</p> <p>isUserDataUpToDate(<code>userData</code>, <code>currentVersion</code>): <code>boolean</code></p> <p>Checks if the user data is up-to-date with the current version of the application.</p>"},{"location":"Frontend%20Development/api/utils/functions/isUserDataUpToDate/#parameters","title":"Parameters","text":"<p>\u2022 userData: <code>undefined</code> | <code>Object</code></p> <p>the user data to compare with the application version</p> <p>\u2022 currentVersion: <code>string</code></p> <p>the current version of the application</p>"},{"location":"Frontend%20Development/api/utils/functions/isUserDataUpToDate/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"Frontend%20Development/api/utils/functions/loadFileContents/","title":"loadFileContents","text":"<p>@wuespace/telestion / utils / loadFileContents</p> <p>loadFileContents(<code>file</code>, <code>encoding</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Loads the contents of a specified file.</p>"},{"location":"Frontend%20Development/api/utils/functions/loadFileContents/#parameters","title":"Parameters","text":"<p>\u2022 file: <code>File</code></p> <p>The file object to load contents from.</p> <p>\u2022 encoding: <code>string</code>= <code>'utf-8'</code></p> <p>The encoding to use while reading the file. Default is UTF-8.</p>"},{"location":"Frontend%20Development/api/utils/functions/loadFileContents/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <ul> <li>A Promise that resolves with the contents of the file as a string.          - If the file is empty, the Promise will be rejected with an error.</li> </ul>"},{"location":"Frontend%20Development/api/utils/functions/wait/","title":"Wait","text":"<p>@wuespace/telestion / utils / wait</p> <p>wait(<code>timeout</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Waits for the specified amount of time before resolving the returned promise.</p>"},{"location":"Frontend%20Development/api/utils/functions/wait/#parameters","title":"Parameters","text":"<p>\u2022 timeout: <code>number</code></p> <p>The duration in milliseconds to wait before resolving.</p>"},{"location":"Frontend%20Development/api/utils/functions/wait/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p> <p>A promise that resolves after the specified time has elapsed.</p>"},{"location":"Frontend%20Development/api/widget/","title":"Index","text":"<p>@wuespace/telestion / widget</p> <p>Everything you need for building and/or displaying widgets.</p>"},{"location":"Frontend%20Development/api/widget/#example","title":"Example","text":"<pre><code>import { ... } from '@wuespace/telestion/widget';\n</code></pre>"},{"location":"Frontend%20Development/api/widget/#interfaces","title":"Interfaces","text":"<ul> <li>WidgetRendererProps</li> </ul>"},{"location":"Frontend%20Development/api/widget/#variables","title":"Variables","text":"<ul> <li>widgetConfigContext</li> </ul>"},{"location":"Frontend%20Development/api/widget/#functions","title":"Functions","text":"<ul> <li>WidgetRenderer</li> <li>getWidgetById</li> <li>getWidgets</li> </ul>"},{"location":"Frontend%20Development/api/widget/#references","title":"References","text":""},{"location":"Frontend%20Development/api/widget/#widget","title":"Widget","text":"<p>Re-exports Widget</p>"},{"location":"Frontend%20Development/api/widget/#registerwidgets","title":"registerWidgets","text":"<p>Re-exports registerWidgets</p>"},{"location":"Frontend%20Development/api/widget/functions/WidgetRenderer/","title":"WidgetRenderer","text":"<p>@wuespace/telestion / widget / WidgetRenderer</p> <p>WidgetRenderer(<code>WidgetRendererProps</code>): <code>Element</code></p> <p>Renders a widget based on the provided widgetInstanceId.</p>"},{"location":"Frontend%20Development/api/widget/functions/WidgetRenderer/#parameters","title":"Parameters","text":"<p>\u2022 WidgetRendererProps: <code>WidgetRendererProps</code></p> <p>The props for the WidgetRenderer.</p>"},{"location":"Frontend%20Development/api/widget/functions/WidgetRenderer/#returns","title":"Returns","text":"<p><code>Element</code></p> <p>The rendered widget.</p>"},{"location":"Frontend%20Development/api/widget/functions/WidgetRenderer/#throws","title":"Throws","text":"<p>Error If the widget instance is not found.</p>"},{"location":"Frontend%20Development/api/widget/functions/getWidgetById/","title":"getWidgetById","text":"<p>@wuespace/telestion / widget / getWidgetById</p> <p>getWidgetById(<code>id</code>): <code>undefined</code> | <code>Widget</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;&gt;</p> <p>Retrieves a widget by its unique type ID.</p>"},{"location":"Frontend%20Development/api/widget/functions/getWidgetById/#parameters","title":"Parameters","text":"<p>\u2022 id: <code>string</code></p> <p>The unique type ID of the widget.</p>"},{"location":"Frontend%20Development/api/widget/functions/getWidgetById/#returns","title":"Returns","text":"<p><code>undefined</code> | <code>Widget</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;&gt;</p> <p>The widget associated with the ID, or null if the widget is not found.</p>"},{"location":"Frontend%20Development/api/widget/functions/getWidgets/","title":"getWidgets","text":"<p>@wuespace/telestion / widget / getWidgets</p> <p>getWidgets(): <code>Widget</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;&gt;[]</p> <p>Returns an array of all the widgets that are currently registered.</p>"},{"location":"Frontend%20Development/api/widget/functions/getWidgets/#returns","title":"Returns","text":"<p><code>Widget</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;&gt;[]</p> <p>An array containing all the widgets.</p>"},{"location":"Frontend%20Development/api/widget/interfaces/WidgetRendererProps/","title":"WidgetRendererProps","text":"<p>@wuespace/telestion / widget / WidgetRendererProps</p>"},{"location":"Frontend%20Development/api/widget/interfaces/WidgetRendererProps/#properties","title":"Properties","text":""},{"location":"Frontend%20Development/api/widget/interfaces/WidgetRendererProps/#widgetinstanceid","title":"widgetInstanceId","text":"<p>widgetInstanceId: <code>string</code></p>"},{"location":"Frontend%20Development/api/widget/variables/widgetConfigContext/","title":"widgetConfigContext","text":"<p>@wuespace/telestion / widget / widgetConfigContext</p> <p><code>const</code> widgetConfigContext: <code>Context</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"_writers-guide/","title":"Writer\u2019s Guide","text":""},{"location":"_writers-guide/#introduction","title":"Introduction","text":"<p>This guide is intended to help you write documentation.</p>"},{"location":"_writers-guide/#writing-style","title":"Writing Style","text":""},{"location":"_writers-guide/#general","title":"General","text":"<ul> <li>Use the active voice.</li> <li>Use the present tense.</li> <li>Use the second person.</li> <li>Use the imperative mood.</li> <li>Use they/them/their as singular pronouns.</li> </ul>"},{"location":"_writers-guide/#markdown","title":"Markdown","text":""},{"location":"_writers-guide/#general_1","title":"General","text":"<ul> <li>Use the GitHub Flavored Markdown syntax.</li> <li>Use the CommonMark specification.</li> </ul>"},{"location":"_writers-guide/#headings","title":"Headings","text":"<ul> <li>Use <code>#</code> for headings.</li> <li>Use <code>##</code> for subheadings.</li> <li>Use <code>###</code> for sub-subheadings.</li> </ul>"},{"location":"_writers-guide/#lists","title":"Lists","text":"<ul> <li>Use <code>*</code> for unordered lists.</li> <li>Use <code>1.</code> for ordered lists.</li> <li>Use <code>*</code> for nested unordered lists.</li> <li>Use <code>1.</code> for nested ordered lists.</li> </ul>"},{"location":"_writers-guide/#links","title":"Links","text":"<ul> <li>Use <code>[text](url)</code> for links.</li> </ul>"},{"location":"_writers-guide/#internal-links","title":"Internal Links","text":"<ul> <li>Use relative links for internal links.</li> <li>Use the <code>.md</code> extension for internal links.</li> <li>Use the <code>#</code> symbol for internal links to (sub-) headings.</li> </ul> <p>Example</p> <pre><code>[Telestion Website](https://telestion.wuespace.de)\n\n[Deployment Pre-requisites](Deployment/prerequesites.md)\n\n[Deployment Pre-requisites](Deployment/prerequesites.md#deployment-pre-requisites)\n</code></pre>"},{"location":"_writers-guide/#images","title":"Images","text":"<ul> <li>Use <code>![alt text](url)</code> for images.</li> <li>Write the alt text in sentence case.</li> <li>Place images close to the text that references them.</li> <li>Use the PNG format for images.</li> <li>Use the SVG format for logos and icons.</li> <li>Use the JPEG format for photographs.</li> <li>Use the GIF format for animations.</li> </ul> <p>For images that can be inverted for the dark theme, use the following syntax:</p> <pre><code>![alt text](url){ .invertible }\n</code></pre> <p>To add a caption to an image, use the following syntax:</p> <pre><code>&lt;figure markdown&gt;\n![alt text](url)\n&lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p>Example</p> <pre><code>![alt text](url)\n\n![alt text](url){ .invertible }\n\n&lt;figure markdown&gt;\n![alt text](url)\n&lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"_writers-guide/#code-blocks","title":"Code Blocks","text":"<ul> <li>Use <code>```</code> for code blocks.</li> <li>Use <code>```language</code> for code blocks with syntax highlighting.</li> <li>Use <code>```language title=\"name\"</code> for code blocks with syntax highlighting and a title.</li> </ul> <p>Example</p> <pre><code>```java\npublic static void main(String[] args) {\n    System.out.println(\"Hello World!\");\n}\n```\n\n```java title=\"Hello World\"\npublic static void main(String[] args) {\n    System.out.println(\"Hello World!\");\n}\n```\n</code></pre>"},{"location":"_writers-guide/#admonitions","title":"Admonitions","text":"<ul> <li>Use <code>!!! note</code> for notes.</li> <li>Use <code>!!! tip</code> for tips.</li> <li>Use <code>!!! warning</code> for warnings.</li> <li>Use <code>!!! danger</code> for dangers.</li> <li>Use <code>!!! example</code> for examples.</li> <li>Use <code>!!! question</code> for questions.</li> </ul> <p>Example</p> <pre><code>!!! note\n    This is a note.\n\n!!! tip\n    This is a tip.\n\n!!! warning\n    This is a warning.\n\n!!! danger\n    This is a danger.\n\n!!! example\n    This is an example.\n\n!!! question\n    This is a question.\n</code></pre>"},{"location":"_writers-guide/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li>Use <code>++</code> for keyboard shortcuts.</li> <li>Use <code>++ctrl+f++</code> for keyboard shortcuts with multiple keys.</li> <li>Use lowercase letters for keyboard shortcuts.</li> </ul> <p>Example</p> <p>Press Ctrl+F to open the menu.</p> <pre><code>Press ++ctrl+f++ to open the menu.\n</code></pre>"}]}